{"version":3,"file":"index.js","sources":["../src/EasybaseProvider/types.ts","../src/EasybaseProvider/g.ts","../src/EasybaseProvider/object-observer.js","../src/EasybaseProvider/utils.ts","../src/EasybaseProvider/auth.ts","../src/EasybaseProvider/table.ts","../src/EasybaseProvider/db.ts","../src/EasybaseProvider/EasybaseProvider.ts","../src/index.ts"],"sourcesContent":["import { SQW } from \"easyqb/types/sq\";\nimport { NewExpression } from \"easyqb/types/expression\";\nimport { AnalyticsInstance } from \"analytics\";\n\nexport interface ConfigureFrameOptions {\n    /** Edit starting index from which records will be retrieved from. Useful for paging. */\n    offset?: number;\n    /** Limit the amount of records to be retrieved. Set to -1 or null to return all records. Can be used in combination with offset. */\n    limit?: number | null;\n    /** Table to sync frame with. (Projects only) */\n    tableName?: string;\n}\n\nexport interface EasybaseProviderPropsOptions {\n    /** Custom authentication string. Can be set in integration menu. If it is set, it is required to access integration. This acts as an extra layer of security and extensibility. */\n    authentication?: string;\n    /** Log Easybase react status and events to console. */\n    logging?: boolean;\n    /** Universal Google Analytics Tracking/Measurement ID for user activity reporting – Google Analytics 4 is not currently supported */\n    googleAnalyticsId?: string;\n}\n\nexport interface EasybaseProviderProps {\n    /** Easybase ebconfig object. Can be downloaded in the integration drawer next to 'React Token'. This is automatically generated.  */\n    ebconfig: Ebconfig;\n    /** Optional configuration parameters. */\n    options?: EasybaseProviderPropsOptions\n}\n\nexport interface FrameConfiguration {\n    /** Edit starting index from which records will be retrieved from. Useful for paging. */\n    offset: number;\n    /** Limit the amount of records to be retrieved. Set to -1 or null to return all records. Can be used in combination with offset. */\n    limit: number | null;\n    /** Table to sync frame with. (Projects only) */\n    tableName?: string;\n}\n\nexport interface Ebconfig {\n    tt?: string,\n    integration: string,\n    version: string\n}\n\nexport interface AddRecordOptions {\n    /** If true, record will be inserted at the end of the collection rather than the front. Overwrites absoluteIndex. */\n    insertAtEnd?: boolean;\n    /** Values to post to EasyBase collection. Format is { column name: value } */\n    newRecord: Record<string, any>;\n    /** Table to post new record to. (Projects only) */\n    tableName?: string;\n}\n\nexport interface DeleteRecordOptions {\n    record: Record<string, any>;\n    /** Table to delete record from. (Projects only) */\n    tableName?: string;\n}\n\nexport interface QueryOptions {\n    /** Name of the query saved in Easybase's Visual Query Builder */\n    queryName: string;\n    /** If you would like to sort the order of your query by a column. Pass the name of that column here */\n    sortBy?: string;\n    /** By default, columnToSortBy will sort your query by ascending value (1, 2, 3...). To sort by descending set this to true */\n    descending?: boolean;\n    /** Edit starting index from which records will be retrieved from. Useful for paging. */\n    offset?: number;\n    /** Limit the amount of records to be retrieved. Can be used in combination with offset. */\n    limit?: number;\n    /** This object can be set to overwrite the query values as set in the integration menu. If your query is setup to find records where 'age' >= 0, passing in { age: 50 } will query where 'age' >= 50. Read more: https://easybase.io/about/2020/09/15/Customizing-query-values/ */\n    customQuery?: Record<string, any>;\n    /** Table to query. (Projects only) */\n    tableName?: string;\n}\n\nexport interface FileFromURI {\n    /** Path on local device to the attachment. Usually received from react-native-image-picker or react-native-document-picker */\n    uri: string,\n    /** Name of the file with proper extension */\n    name: string,\n    /** File MIME type */\n    type: string\n}\n\nexport interface UpdateRecordAttachmentOptions {\n    /** EasyBase Record to attach this attachment to */\n    record: Record<string, any>;\n    /** The name of the column that is of type file/image/video */\n    columnName: string;\n    /** Either an HTML File element containing the correct type of attachment or a FileFromURI object for React Native instances.\n     * For React Native use libraries such as react-native-image-picker and react-native-document-picker.\n     * The file name must have a proper file extension corresponding to the attachment. \n     */\n    attachment: File | FileFromURI;\n    /** Table to post attachment to. (Projects only) */\n    tableName?: string;\n}\n\nexport interface StatusResponse {\n    /** Returns true if the operation was successful */\n    success: boolean;\n    /** Readable description of the the operation's status */\n    message: string;\n    /** Will represent a corresponding error if an error was thrown during the operation. */\n    errorCode?: string;\n}\n\nexport interface EmailTemplate {\n    /** Optional header of email that will be sent to user with verification code */\n    greeting?: string;\n    /** Optional name of application for placement within email */\n    appName?: string;\n    /** Optional footer of verification email often used for disclaimers. Can be a valid HTML string */\n    footer?: string;\n}\n\nexport enum POST_TYPES {\n    UPLOAD_ATTACHMENT = \"upload_attachment\",\n    HANDSHAKE = \"handshake\",\n    VALID_TOKEN = \"valid_token\",\n    GET_FRAME = \"get_frame\",\n    TABLE_SIZE = \"table_size\",\n    COLUMN_TYPES = \"column_types\",\n    SYNC_STACK = \"sync_stack\",\n    SYNC_DELETE = \"sync_delete\",\n    SYNC_INSERT = \"sync_insert\",\n    GET_QUERY = \"get_query\",\n    USER_ATTRIBUTES = \"user_attributes\",\n    SET_ATTRIBUTE = \"set_attribute\",\n    SIGN_UP = \"sign_up\",\n    REQUEST_TOKEN = \"request_token\",\n    EASY_QB = \"easyqb\",\n    RESET_PASSWORD = \"reset_password\",\n    FORGOT_PASSWORD_SEND = \"forgot_password_send\",\n    FORGOT_PASSWORD_CONFIRM = \"forgot_password_confirm\"\n}\n\nexport enum DB_STATUS {\n    ERROR = \"error\",\n    PENDING = \"pending\",\n    SUCCESS = \"success\"\n}\n\nexport enum EXECUTE_COUNT {\n    ALL = \"all\",\n    ONE = \"one\"\n}\n\nexport interface AuthPostResponse {\n    success: boolean;\n    data: any;\n}\n\nexport interface ContextValue {\n    /**\n     * Signs out the current user.\n     */\n    signOut(): void;\n    /**\n     * Retrieve the currently signed in users attribute object.\n     * @async\n     * @return {Promise<Record<string, string>>} Promise<Record<string, string>>\n     */\n    getUserAttributes(): Promise<Record<string, string>>;\n    /**\n     * Set a single attribute of the currently signed in user. Can also be updated visually in the Easybase 'Users' tab.\n     * @async\n     * @abstract\n     * @param key Object key. Can be a new key or existing key.\n     * @param value attribute value.\n     * @return {Promise<StatusResponse>} Promise<StatusResponse>\n     */\n    setUserAttribute(key: string, value: string): Promise<StatusResponse>;\n    /**\n     * Reset the currently signed-in user's password to a new string.\n     * @async\n     * @param {string} currentPassword Signed-in user's current password\n     * @param {string} newPassword New password for user's account\n     * @return {Promise<StatusResponse>} Promise<StatusResponse>\n     */\n    resetUserPassword(currentPassword: string, newPassword: string): Promise<StatusResponse>;\n    /**\n     * Sign in a user that already exists for a project.\n     * @abstract\n     * @async\n     * @param userID unique identifier for new user. Usually an email or phone number.\n     * @param password user password.\n     * @return {Promise<StatusResponse>} Promise<StatusResponse>\n     */\n    signIn(userID: string, password: string): Promise<StatusResponse>;\n    /**\n     * Create a new user for your project. You must still call signIn() after signing up.\n     * @abstract\n     * @async\n     * @param newUserID unique identifier for new user. Usually an email or phone number.\n     * @param password user password. Must be at least 8 characters long.\n     * @param userAttributes Optional object to store user attributes. Can also be edited visually in the Easybase 'Users' tab.\n     * @return {Promise<StatusResponse>} Promise<StatusResponse>\n     */\n    signUp(newUserID: string, password: string, userAttributes?: Record<string, string>): Promise<StatusResponse>;\n    /**\n     * Configure the current frame size. Set the offset and amount of records to retreive assume you don't want to receive\n     * your entire collection. This is useful for paging.\n     * @abstract\n     * @param {ConfigureFrameOptions} options ConfigureFrameOptions\n     * @return {StatusResponse} StatusResponse\n     */\n    configureFrame(options: ConfigureFrameOptions): StatusResponse;\n    /**\n     * Manually add a record to your collection regardless of your current frame. You must call sync() after this to see updated response.\n     * @abstract\n     * @async\n     * @param {AddRecordOptions} options AddRecordOptions\n     * @return {Promise<StatusResponse>} Promise<StatusResponse>\n     */\n    addRecord(options: AddRecordOptions): Promise<StatusResponse>;\n    /**\n     * Manually delete a record from your collection regardless of your current frame. You must call sync() after this to see updated response.\n     * @abstract\n     * @async\n     * @param {Record<string, any>} record \n     * @return {Promise<StatusResponse>} Promise<StatusResponse>\n     */\n    deleteRecord(options: DeleteRecordOptions): Promise<StatusResponse>;\n    /**\n     * Call this method to syncronize your current changes with your database. Delections, additions, and changes will all be reflected by your \n     * backend after calling this method. Call Frame() after this to get a normalized array of the freshest data.\n     * @abstract\n     * @async\n     * @return {Promise<StatusResponse>} Promise<StatusResponse>\n     */\n    sync(): Promise<StatusResponse>;\n    /**\n     * Upload an image to your backend and attach it to a specific record. columnName must reference a column of type 'image'.\n     * The file must have an extension of an image. \n     * Call sync() for fresh data with propery attachment links to cloud hosting.\n     * @abstract\n     * @async\n     * @param {UpdateRecordAttachmentOptions} options UpdateRecordAttachmentOptions\n     * @return {Promise<StatusResponse>} Promise<StatusResponse>\n     */\n    updateRecordImage(options: UpdateRecordAttachmentOptions): Promise<StatusResponse>;\n    /**\n     * Upload a video to your backend and attach it to a specific record. columnName must reference a column of type 'video'. \n     * The file must have an extension of a video.\n     * Call sync() for fresh data with propery attachment links to cloud hosting.\n     * @abstract\n     * @async\n     * @param {UpdateRecordAttachmentOptions} options UpdateRecordAttachmentOptions\n     * @return {Promise<StatusResponse>} Promise<StatusResponse>\n     */\n    updateRecordVideo(options: UpdateRecordAttachmentOptions): Promise<StatusResponse>;\n    /**\n     * Upload a file to your backend and attach it to a specific record. columnName must reference a column of type 'file'. \n     * Call sync() for fresh data with propery attachment links to cloud hosting.\n     * @abstract\n     * @async\n     * @param {UpdateRecordAttachmentOptions} options UpdateRecordAttachmentOptions\n     * @return {Promise<StatusResponse>} Promise<StatusResponse>\n     */\n    updateRecordFile(options: UpdateRecordAttachmentOptions): Promise<StatusResponse>;\n    /**\n     * This function is how you access your current frame. This function does not get new data or push changes to EasyBase. If you \n     * want to syncronize your frame and EasyBase, call sync() then Frame().\n     * @abstract\n     * @return {Record<string, any>[]} Array of records corresponding to the current frame. Call sync() to push changes that you have made to this array.\n     * \n     */\n    Frame(): Record<string, any>[];\n    /**\n     * This function is how you access a single object your current frame. This function does not get new data or push changes to EasyBase. If you \n     * want to syncronize your frame and EasyBase, call sync() then Frame().\n     * @abstract\n     * @param {number} [index] Passing an index will only return the object at that index in your Frame, rather than the entire array. This is useful for editing single objects based on an index.\n     * @return {Record<string, any>} Single record corresponding to that object within the current frame. Call sync() to push changes that you have made to this object.\n     * \n     */\n    Frame(index: number): Record<string, any>;\n    /**\n     * Gets the number of records in your table.\n     * @async\n     * @returns {Promise<number>} The the number of records in your table.\n     */\n    fullTableSize(): Promise<number>;\n    /**\n     * Gets the number of records in your table.\n     * @async\n     * @param {string} [tableName] Name of table to get the sizes of. (Projects only)\n     * @returns {Promise<number>} The the number of records in your table.\n     */\n    fullTableSize(tableName: string): Promise<number>;\n    /**\n     * Retrieve an object detailing the columns in your table mapped to their corresponding type.\n     * @async\n     * @returns {Promise<Record<string, any>>} Object detailing the columns in your table mapped to their corresponding type.\n     */\n    tableTypes(): Promise<Record<string, any>>;\n    /**\n     * Retrieve an object detailing the columns in your table mapped to their corresponding type.\n     * @async\n     * @param {string} [tableName] Name of table to get the types of. (Projects only)\n     * @returns {Promise<Record<string, any>>} Object detailing the columns in your table mapped to their corresponding type.\n     */\n    tableTypes(tableName: string): Promise<Record<string, any>>;\n    /**\n     * View your frames current configuration\n     * @returns {Record<string, any>} Object contains the `offset` and `length` of your current frame.\n     */\n    currentConfiguration(): FrameConfiguration;\n    /**\n     * @async\n     * View a query by name. This returns an isolated array that has no effect on your frame or frame configuration. sync() and Frame() have no \n     * relationship with a Query(). An edited Query cannot be synced with your database, use Frame() for realtime \n     * database array features.\n     * @param {QueryOptions} options QueryOptions\n     * @return {Promise<Record<string, any>[]>} Isolated array of records in the same form as Frame(). Editing this array has no effect and cannot be synced with your database. Use Frame() for realtime database features.\n     */\n    Query(options: QueryOptions): Promise<Record<string, any>[]>;\n    /**\n     * Instantiate EasyQB instance for dynamic CRUD query building: https://easybase.github.io/EasyQB/\n     * @param {string} [tableName] Name of your table.\n     * @param {boolean} [userAssociatedRecordsOnly] **PROJECTS ONLY** Operations will only be performed on records already associated to the currently signed-in user. Inserted records will automatically be associate to the user.\n     * @returns {SQW} EasyQB object for dynamic querying: https://easybase.github.io/EasyQB/\n     */\n    db(tableName?: string, userAssociatedRecordsOnly?: boolean): SQW;\n    /**\n     * Subscribe to db events, invoked by calling `.all` or `.one`: https://easybase.github.io/EasyQB/\n     * @param {function(status?: DB_STATUS, queryType?: string, executeCount?: EXECUTE_COUNT, tableName?: string | null, returned?: any):void} [callback] Callback function to execute on db operations.\n     * @returns {function():void} Calling this function unsubscribes your callback function from events.\n     */\n    dbEventListener(callback: (status?: DB_STATUS, queryType?: string, executeCount?: EXECUTE_COUNT, tableName?: string | null, returned?: any) => void): () => void;\n    /**\n     * Expressions and operations builder for `.db()`, used to create complex conditions, aggregators, and clauses. https://easybase.github.io/EasyQB/docs/operations.html\n     */\n    e: NewExpression;\n    /**\n     * @async\n     * Trigger an email to the given username with a verification code to reset the user's password. This verification \n     * code is used in the `forgotPasswordConfirm` function, along with a new password. **The username must be the user's email address**.\n     * @param {string} username A username which must also be a valid email address\n     * @param {EmailTemplate} emailTemplate Optional details for the formatting & content of the verification email\n     * @return {Promise<StatusResponse>} A StatusResponse corresponding to the successful sending of a verification code email\n     */\n    forgotPassword(username: string, emailTemplate?: EmailTemplate): Promise<StatusResponse>\n    /**\n     * @async\n     * Confirm the resetting of an unauthenticated users password. This function is invoked after `forgotpassword` is used to trigger\n     * an email containing a verification code to the given username [*which must also be an email*]. The user's randomly generated\n     * verification code from their email is passed in the first parameter. \n     * @param {string} code Verification code found in the email sent from the `forgotPassword` function\n     * @param {string} username The same username (email) used in the `forgotPassword` function\n     * @param {string} newPassword The new password for the corresponding verified user\n     * @return {Promise<StatusResponse>} A StatusResponse corresponding to the successful setting of a new password\n     */\n    forgotPasswordConfirm(code: string, username: string, newPassword: string): Promise<StatusResponse>\n    /**\n     * Retrieve the currently signed-in user's ID.\n     * @return {string | undefined} The currently signed-in user's ID (username), otherwise undefined.\n     */\n    userID(): string | undefined;\n}\n\nexport interface Globals {\n    ebconfig: Ebconfig;\n    token: string;\n    refreshToken: string;\n    integrationID: string;\n    session: number;\n    options: EasybaseProviderPropsOptions;\n    instance: string;\n    mounted: boolean;\n    newTokenCallback(): void;\n    userID: string | undefined;\n    analytics: AnalyticsInstance | undefined;\n    GA_AUTH_SALT: string | undefined; // https://support.google.com/analytics/answer/6366371?hl=en#hashed\n}\n","import { Ebconfig, EasybaseProviderPropsOptions, Globals } from \"./types\";\nimport Analytics, { AnalyticsInstance } from 'analytics';\nimport googleAnalytics from '@analytics/google-analytics'\n\nnamespace GlobalNamespace {\n    export let ebconfig: Ebconfig;\n    export let token: string;\n    export let refreshToken: string;\n    export let integrationID: string;\n    export let session: number;\n    export let options: EasybaseProviderPropsOptions;\n    export let instance: string;\n    export let mounted: boolean;\n    export let newTokenCallback: () => {};\n    export let userID: string;\n    export let analytics: AnalyticsInstance;\n    export let GA_AUTH_SALT: string; // https://support.google.com/analytics/answer/6366371?hl=en#hashed\n}\n\nconst _g: Globals = { ...GlobalNamespace };\n\nexport default _g;\n\nexport function gFactory(ebconfig: Ebconfig, options?: EasybaseProviderPropsOptions): Globals {\n    const defaultParams = {\n        options: { ...options },\n        integrationID: ebconfig.integration,\n        ebconfig: ebconfig\n    }\n\n    if (ebconfig.integration && options && options.googleAnalyticsId) {\n        if (options.googleAnalyticsId.startsWith(\"G-\")) {\n            // TODO: handle GA4 https://github.com/DavidWells/analytics\n            console.error(\"Google Analytics 4 tracking Id detected. This version is not supported, please use Universal Analytics instead – https://support.google.com/analytics/answer/10269537?hl=en\")\n            return { ...GlobalNamespace, ...defaultParams } as Globals;\n        } else {\n            const analytics = Analytics({\n                app: ebconfig.integration,\n                plugins: [\n                    googleAnalytics({\n                        trackingId: options.googleAnalyticsId,\n                        debug: process ? process.env.NODE_ENV === 'development' : false\n                    })\n                ]\n            })\n            return { ...GlobalNamespace, ...defaultParams, analytics, GA_AUTH_SALT: \"p8YpJmWxF\" } as Globals;\n        }\n    } else {\n        return { ...GlobalNamespace, ...defaultParams } as Globals;\n    }\n}\n","const\n\tINSERT = 'insert',\n\tUPDATE = 'update',\n\tDELETE = 'delete',\n\tREVERSE = 'reverse',\n\tSHUFFLE = 'shuffle',\n\toMetaKey = Symbol('observable-meta-key'),\n\tvalidObservableOptionKeys = { async: 1 },\n\tvalidObserverOptionKeys = { path: 1, pathsOf: 1, pathsFrom: 1 },\n\tprocessObserveOptions = function processObserveOptions(options) {\n\t\tconst result = {};\n\t\tif (options.path !== undefined) {\n\t\t\tif (typeof options.path !== 'string' || options.path === '') {\n\t\t\t\tthrow new Error('\"path\" option, if/when provided, MUST be a non-empty string');\n\t\t\t}\n\t\t\tresult.path = options.path;\n\t\t}\n\t\tif (options.pathsOf !== undefined) {\n\t\t\tif (options.path) {\n\t\t\t\tthrow new Error('\"pathsOf\" option MAY NOT be specified together with \"path\" option');\n\t\t\t}\n\t\t\tif (typeof options.pathsOf !== 'string') {\n\t\t\t\tthrow new Error('\"pathsOf\" option, if/when provided, MUST be a string (MAY be empty)');\n\t\t\t}\n\t\t\tresult.pathsOf = options.pathsOf.split('.').filter(n => n);\n\t\t}\n\t\tif (options.pathsFrom !== undefined) {\n\t\t\tif (options.path || options.pathsOf) {\n\t\t\t\tthrow new Error('\"pathsFrom\" option MAY NOT be specified together with \"path\"/\"pathsOf\"  option/s');\n\t\t\t}\n\t\t\tif (typeof options.pathsFrom !== 'string' || options.pathsFrom === '') {\n\t\t\t\tthrow new Error('\"pathsFrom\" option, if/when provided, MUST be a non-empty string');\n\t\t\t}\n\t\t\tresult.pathsFrom = options.pathsFrom;\n\t\t}\n\t\tconst invalidOptions = Object.keys(options).filter(option => !validObserverOptionKeys.hasOwnProperty(option));\n\t\tif (invalidOptions.length) {\n\t\t\tthrow new Error(`'${invalidOptions.join(', ')}' is/are not a valid observer option/s`);\n\t\t}\n\t\treturn result;\n\t},\n\tobserve = function observe(observer, options) {\n\t\tif (typeof observer !== 'function') {\n\t\t\tthrow new Error(`observer MUST be a function, got '${observer}'`);\n\t\t}\n\n\t\tconst\n\t\t\toMeta = this[oMetaKey],\n\t\t\tobservers = oMeta.observers;\n\t\tif (!observers.some(o => o[0] === observer)) {\n\t\t\tlet opts;\n\t\t\tif (options) {\n\t\t\t\topts = processObserveOptions(options);\n\t\t\t} else {\n\t\t\t\topts = {};\n\t\t\t}\n\t\t\tobservers.push([observer, opts]);\n\t\t} else {\n\t\t\tconsole.warn('observer may be bound to an observable only once; will NOT rebind');\n\t\t}\n\t},\n\tunobserve = function unobserve() {\n\t\tconst oMeta = this[oMetaKey];\n\t\tconst observers = oMeta.observers;\n\t\tlet ol = observers.length;\n\t\tif (ol) {\n\t\t\tlet al = arguments.length;\n\t\t\tif (al) {\n\t\t\t\twhile (al--) {\n\t\t\t\t\tlet i = ol;\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\tif (observers[i][0] === arguments[al]) {\n\t\t\t\t\t\t\tobservers.splice(i, 1);\n\t\t\t\t\t\t\tol--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tobservers.splice(0);\n\t\t\t}\n\t\t}\n\t},\n\tpropertiesBluePrint = { [oMetaKey]: { value: null }, observe: { value: observe }, unobserve: { value: unobserve } },\n\tprepareObject = function prepareObject(source, oMeta) {\n\t\tpropertiesBluePrint[oMetaKey].value = oMeta;\n\t\tconst target = Object.defineProperties({}, propertiesBluePrint);\n\t\tfor (const key of Object.keys(source)) {\n\t\t\ttarget[key] = getObservedOf(source[key], key, oMeta);\n\t\t}\n\t\treturn target;\n\t},\n\tprepareArray = function prepareArray(source, oMeta) {\n\t\tlet i = 0, l = source.length;\n\t\tpropertiesBluePrint[oMetaKey].value = oMeta;\n\t\tconst target = Object.defineProperties(new Array(l), propertiesBluePrint);\n\t\tfor (; i < l; i++) {\n\t\t\ttarget[i] = getObservedOf(source[i], i, oMeta);\n\t\t}\n\t\treturn target;\n\t},\n\tprepareTypedArray = function prepareTypedArray(source, oMeta) {\n\t\tpropertiesBluePrint[oMetaKey].value = oMeta;\n\t\tObject.defineProperties(source, propertiesBluePrint);\n\t\treturn source;\n\t},\n\tfilterChanges = function filterChanges(options, changes) {\n\t\tlet result = changes;\n\t\tif (options.path) {\n\t\t\tconst oPath = options.path;\n\t\t\tresult = changes.filter(change =>\n\t\t\t\tchange.path.join('.') === oPath\n\t\t\t);\n\t\t} else if (options.pathsOf) {\n\t\t\tconst oPathsOf = options.pathsOf;\n\t\t\tresult = changes.filter(change =>\n\t\t\t\tchange.path.length === oPathsOf.length + 1 ||\n\t\t\t\t(change.path.length === oPathsOf.length && (change.type === REVERSE || change.type === SHUFFLE))\n\t\t\t);\n\t\t} else if (options.pathsFrom) {\n\t\t\tconst oPathsFrom = options.pathsFrom;\n\t\t\tresult = changes.filter(change =>\n\t\t\t\tchange.path.join('.').startsWith(oPathsFrom)\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t},\n\tcallObserverSafe = function callObserverSafe(listener, changes) {\n\t\ttry {\n\t\t\tlistener(changes);\n\t\t} catch (e) {\n\t\t\tconsole.error(`failed to notify listener ${listener} with ${changes}`, e);\n\t\t}\n\t},\n\tcallObserversFromMT = function callObserversFromMT() {\n\t\tconst batches = this.batches;\n\t\tthis.batches = null;\n\t\tfor (const [listener, options] of batches) {\n\t\t\tcallObserverSafe(listener, options);\n\t\t}\n\t},\n\tcallObservers = function callObservers(oMeta, changes) {\n\t\tlet currentObservable = oMeta;\n\t\tlet observers, target, options, relevantChanges, i, newPath, tmp;\n\t\tconst l = changes.length;\n\t\tdo {\n\t\t\tobservers = currentObservable.observers;\n\t\t\ti = observers.length;\n\t\t\twhile (i--) {\n\t\t\t\t[target, options] = observers[i];\n\t\t\t\trelevantChanges = filterChanges(options, changes);\n\n\t\t\t\tif (relevantChanges.length) {\n\t\t\t\t\tif (currentObservable.options.async) {\n\t\t\t\t\t\t//\tthis is the async dispatch handling\n\t\t\t\t\t\tif (!currentObservable.batches) {\n\t\t\t\t\t\t\tcurrentObservable.batches = [];\n\t\t\t\t\t\t\tqueueMicrotask(callObserversFromMT.bind(currentObservable));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet rb = currentObservable.batches.find(b => b[0] === target);\n\t\t\t\t\t\tif (!rb) {\n\t\t\t\t\t\t\trb = [target, []];\n\t\t\t\t\t\t\tcurrentObservable.batches.push(rb);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tArray.prototype.push.apply(rb[1], relevantChanges);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//\tthis is the naive straight forward synchronous dispatch\n\t\t\t\t\t\tcallObserverSafe(target, relevantChanges);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet tmpa;\n\t\t\tif (currentObservable.parent) {\n\t\t\t\ttmpa = new Array(l);\n\t\t\t\tfor (let i = 0; i < l; i++) {\n\t\t\t\t\ttmp = changes[i];\n\t\t\t\t\tnewPath = [currentObservable.ownKey, ...tmp.path];\n\t\t\t\t\ttmpa[i] = {\n\t\t\t\t\t\ttype: tmp.type,\n\t\t\t\t\t\tpath: newPath,\n\t\t\t\t\t\tvalue: tmp.value,\n\t\t\t\t\t\toldValue: tmp.oldValue,\n\t\t\t\t\t\tobject: tmp.object\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tchanges = tmpa;\n\t\t\t\tcurrentObservable = currentObservable.parent;\n\t\t\t} else {\n\t\t\t\tcurrentObservable = null;\n\t\t\t}\n\t\t} while (currentObservable);\n\t},\n\tgetObservedOf = function getObservedOf(item, key, parent) {\n\t\tif (!item || typeof item !== 'object') {\n\t\t\treturn item;\n\t\t} else if (Array.isArray(item)) {\n\t\t\treturn new ArrayOMeta({ target: item, ownKey: key, parent: parent }).proxy;\n\t\t} else if (ArrayBuffer.isView(item)) {\n\t\t\treturn new TypedArrayOMeta({ target: item, ownKey: key, parent: parent }).proxy;\n\t\t} else if (item instanceof Date || item instanceof Error) {\n\t\t\treturn item;\n\t\t} else {\n\t\t\treturn new ObjectOMeta({ target: item, ownKey: key, parent: parent }).proxy;\n\t\t}\n\t},\n\tproxiedPop = function proxiedPop() {\n\t\tconst oMeta = this[oMetaKey],\n\t\t\ttarget = oMeta.target,\n\t\t\tpoppedIndex = target.length - 1;\n\n\t\tlet popResult = target.pop();\n\t\tif (popResult && typeof popResult === 'object') {\n\t\t\tconst tmpObserved = popResult[oMetaKey];\n\t\t\tif (tmpObserved) {\n\t\t\t\tpopResult = tmpObserved.detach();\n\t\t\t}\n\t\t}\n\n\t\tconst changes = [{ type: DELETE, path: [poppedIndex], oldValue: popResult, object: this }];\n\t\tcallObservers(oMeta, changes);\n\n\t\treturn popResult;\n\t},\n\tproxiedPush = function proxiedPush() {\n\t\tconst\n\t\t\toMeta = this[oMetaKey],\n\t\t\ttarget = oMeta.target,\n\t\t\tl = arguments.length,\n\t\t\tpushContent = new Array(l),\n\t\t\tinitialLength = target.length;\n\n\t\tfor (let i = 0; i < l; i++) {\n\t\t\tpushContent[i] = getObservedOf(arguments[i], initialLength + i, oMeta);\n\t\t}\n\t\tconst pushResult = Reflect.apply(target.push, target, pushContent);\n\n\t\tconst changes = [];\n\t\tfor (let i = initialLength, l = target.length; i < l; i++) {\n\t\t\tchanges[i - initialLength] = { type: INSERT, path: [i], value: target[i], object: this };\n\t\t}\n\t\tcallObservers(oMeta, changes);\n\n\t\treturn pushResult;\n\t},\n\tproxiedShift = function proxiedShift() {\n\t\tconst\n\t\t\toMeta = this[oMetaKey],\n\t\t\ttarget = oMeta.target;\n\t\tlet shiftResult, i, l, item, tmpObserved;\n\n\t\tshiftResult = target.shift();\n\t\tif (shiftResult && typeof shiftResult === 'object') {\n\t\t\ttmpObserved = shiftResult[oMetaKey];\n\t\t\tif (tmpObserved) {\n\t\t\t\tshiftResult = tmpObserved.detach();\n\t\t\t}\n\t\t}\n\n\t\t//\tupdate indices of the remaining items\n\t\tfor (i = 0, l = target.length; i < l; i++) {\n\t\t\titem = target[i];\n\t\t\tif (item && typeof item === 'object') {\n\t\t\t\ttmpObserved = item[oMetaKey];\n\t\t\t\tif (tmpObserved) {\n\t\t\t\t\ttmpObserved.ownKey = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst changes = [{ type: DELETE, path: [0], oldValue: shiftResult, object: this }];\n\t\tcallObservers(oMeta, changes);\n\n\t\treturn shiftResult;\n\t},\n\tproxiedUnshift = function proxiedUnshift() {\n\t\tconst\n\t\t\toMeta = this[oMetaKey],\n\t\t\ttarget = oMeta.target,\n\t\t\tal = arguments.length,\n\t\t\tunshiftContent = new Array(al);\n\n\t\tfor (let i = 0; i < al; i++) {\n\t\t\tunshiftContent[i] = getObservedOf(arguments[i], i, oMeta);\n\t\t}\n\t\tconst unshiftResult = Reflect.apply(target.unshift, target, unshiftContent);\n\n\t\tfor (let i = 0, l = target.length, item; i < l; i++) {\n\t\t\titem = target[i];\n\t\t\tif (item && typeof item === 'object') {\n\t\t\t\tconst tmpObserved = item[oMetaKey];\n\t\t\t\tif (tmpObserved) {\n\t\t\t\t\ttmpObserved.ownKey = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//\tpublish changes\n\t\tconst l = unshiftContent.length;\n\t\tconst changes = new Array(l);\n\t\tfor (let i = 0; i < l; i++) {\n\t\t\tchanges[i] = { type: INSERT, path: [i], value: target[i], object: this };\n\t\t}\n\t\tcallObservers(oMeta, changes);\n\n\t\treturn unshiftResult;\n\t},\n\tproxiedReverse = function proxiedReverse() {\n\t\tconst\n\t\t\toMeta = this[oMetaKey],\n\t\t\ttarget = oMeta.target;\n\t\tlet i, l, item;\n\n\t\ttarget.reverse();\n\t\tfor (i = 0, l = target.length; i < l; i++) {\n\t\t\titem = target[i];\n\t\t\tif (item && typeof item === 'object') {\n\t\t\t\tconst tmpObserved = item[oMetaKey];\n\t\t\t\tif (tmpObserved) {\n\t\t\t\t\ttmpObserved.ownKey = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst changes = [{ type: REVERSE, path: [], object: this }];\n\t\tcallObservers(oMeta, changes);\n\n\t\treturn this;\n\t},\n\tproxiedSort = function proxiedSort(comparator) {\n\t\tconst\n\t\t\toMeta = this[oMetaKey],\n\t\t\ttarget = oMeta.target;\n\t\tlet i, l, item;\n\n\t\ttarget.sort(comparator);\n\t\tfor (i = 0, l = target.length; i < l; i++) {\n\t\t\titem = target[i];\n\t\t\tif (item && typeof item === 'object') {\n\t\t\t\tconst tmpObserved = item[oMetaKey];\n\t\t\t\tif (tmpObserved) {\n\t\t\t\t\ttmpObserved.ownKey = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst changes = [{ type: SHUFFLE, path: [], object: this }];\n\t\tcallObservers(oMeta, changes);\n\n\t\treturn this;\n\t},\n\tproxiedFill = function proxiedFill(filVal, start, end) {\n\t\tconst\n\t\t\toMeta = this[oMetaKey],\n\t\t\ttarget = oMeta.target,\n\t\t\tchanges = [],\n\t\t\ttarLen = target.length,\n\t\t\tprev = target.slice(0);\n\t\tstart = start === undefined ? 0 : (start < 0 ? Math.max(tarLen + start, 0) : Math.min(start, tarLen));\n\t\tend = end === undefined ? tarLen : (end < 0 ? Math.max(tarLen + end, 0) : Math.min(end, tarLen));\n\n\t\tif (start < tarLen && end > start) {\n\t\t\ttarget.fill(filVal, start, end);\n\n\t\t\tlet tmpObserved;\n\t\t\tfor (let i = start, item, tmpTarget; i < end; i++) {\n\t\t\t\titem = target[i];\n\t\t\t\ttarget[i] = getObservedOf(item, i, oMeta);\n\t\t\t\tif (prev.hasOwnProperty(i)) {\n\t\t\t\t\ttmpTarget = prev[i];\n\t\t\t\t\tif (tmpTarget && typeof tmpTarget === 'object') {\n\t\t\t\t\t\ttmpObserved = tmpTarget[oMetaKey];\n\t\t\t\t\t\tif (tmpObserved) {\n\t\t\t\t\t\t\ttmpTarget = tmpObserved.detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tchanges.push({ type: UPDATE, path: [i], value: target[i], oldValue: tmpTarget, object: this });\n\t\t\t\t} else {\n\t\t\t\t\tchanges.push({ type: INSERT, path: [i], value: target[i], object: this });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcallObservers(oMeta, changes);\n\t\t}\n\n\t\treturn this;\n\t},\n\tproxiedCopyWithin = function proxiedCopyWithin(dest, start, end) {\n\t\tconst\n\t\t\toMeta = this[oMetaKey],\n\t\t\ttarget = oMeta.target,\n\t\t\ttarLen = target.length;\n\t\tdest = dest < 0 ? Math.max(tarLen + dest, 0) : dest;\n\t\tstart = start === undefined ? 0 : (start < 0 ? Math.max(tarLen + start, 0) : Math.min(start, tarLen));\n\t\tend = end === undefined ? tarLen : (end < 0 ? Math.max(tarLen + end, 0) : Math.min(end, tarLen));\n\t\tconst len = Math.min(end - start, tarLen - dest);\n\n\t\tif (dest < tarLen && dest !== start && len > 0) {\n\t\t\tconst\n\t\t\t\tprev = target.slice(0),\n\t\t\t\tchanges = [];\n\n\t\t\ttarget.copyWithin(dest, start, end);\n\n\t\t\tfor (let i = dest, nItem, oItem, tmpObserved; i < dest + len; i++) {\n\t\t\t\t//\tupdate newly placed observables, if any\n\t\t\t\tnItem = target[i];\n\t\t\t\tif (nItem && typeof nItem === 'object') {\n\t\t\t\t\tnItem = getObservedOf(nItem, i, oMeta);\n\t\t\t\t\ttarget[i] = nItem;\n\t\t\t\t}\n\n\t\t\t\t//\tdetach overridden observables, if any\n\t\t\t\toItem = prev[i];\n\t\t\t\tif (oItem && typeof oItem === 'object') {\n\t\t\t\t\ttmpObserved = oItem[oMetaKey];\n\t\t\t\t\tif (tmpObserved) {\n\t\t\t\t\t\toItem = tmpObserved.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (typeof nItem !== 'object' && nItem === oItem) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tchanges.push({ type: UPDATE, path: [i], value: nItem, oldValue: oItem, object: this });\n\t\t\t}\n\n\t\t\tcallObservers(oMeta, changes);\n\t\t}\n\n\t\treturn this;\n\t},\n\tproxiedSplice = function proxiedSplice() {\n\t\tconst\n\t\t\toMeta = this[oMetaKey],\n\t\t\ttarget = oMeta.target,\n\t\t\tsplLen = arguments.length,\n\t\t\tspliceContent = new Array(splLen),\n\t\t\ttarLen = target.length;\n\n\t\t//\tobservify the newcomers\n\t\tfor (let i = 0; i < splLen; i++) {\n\t\t\tspliceContent[i] = getObservedOf(arguments[i], i, oMeta);\n\t\t}\n\n\t\t//\tcalculate pointers\n\t\tconst\n\t\t\tstartIndex = splLen === 0 ? 0 : (spliceContent[0] < 0 ? tarLen + spliceContent[0] : spliceContent[0]),\n\t\t\tremoved = splLen < 2 ? tarLen - startIndex : spliceContent[1],\n\t\t\tinserted = Math.max(splLen - 2, 0),\n\t\t\tspliceResult = Reflect.apply(target.splice, target, spliceContent),\n\t\t\tnewTarLen = target.length;\n\n\t\t//\treindex the paths\n\t\tlet tmpObserved;\n\t\tfor (let i = 0, item; i < newTarLen; i++) {\n\t\t\titem = target[i];\n\t\t\tif (item && typeof item === 'object') {\n\t\t\t\ttmpObserved = item[oMetaKey];\n\t\t\t\tif (tmpObserved) {\n\t\t\t\t\ttmpObserved.ownKey = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//\tdetach removed objects\n\t\tlet i, l, item;\n\t\tfor (i = 0, l = spliceResult.length; i < l; i++) {\n\t\t\titem = spliceResult[i];\n\t\t\tif (item && typeof item === 'object') {\n\t\t\t\ttmpObserved = item[oMetaKey];\n\t\t\t\tif (tmpObserved) {\n\t\t\t\t\tspliceResult[i] = tmpObserved.detach();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst changes = [];\n\t\tlet index;\n\t\tfor (index = 0; index < removed; index++) {\n\t\t\tif (index < inserted) {\n\t\t\t\tchanges.push({ type: UPDATE, path: [startIndex + index], value: target[startIndex + index], oldValue: spliceResult[index], object: this });\n\t\t\t} else {\n\t\t\t\tchanges.push({ type: DELETE, path: [startIndex + index], oldValue: spliceResult[index], object: this });\n\t\t\t}\n\t\t}\n\t\tfor (; index < inserted; index++) {\n\t\t\tchanges.push({ type: INSERT, path: [startIndex + index], value: target[startIndex + index], object: this });\n\t\t}\n\t\tcallObservers(oMeta, changes);\n\n\t\treturn spliceResult;\n\t},\n\tproxiedTypedArraySet = function proxiedTypedArraySet(source, offset) {\n\t\tconst\n\t\t\toMeta = this[oMetaKey],\n\t\t\ttarget = oMeta.target,\n\t\t\tsouLen = source.length,\n\t\t\tprev = target.slice(0);\n\t\toffset = offset || 0;\n\n\t\ttarget.set(source, offset);\n\t\tconst changes = new Array(souLen);\n\t\tfor (let i = offset; i < (souLen + offset); i++) {\n\t\t\tchanges[i - offset] = { type: UPDATE, path: [i], value: target[i], oldValue: prev[i], object: this };\n\t\t}\n\n\t\tcallObservers(oMeta, changes);\n\t},\n\tproxiedArrayMethods = {\n\t\tpop: proxiedPop,\n\t\tpush: proxiedPush,\n\t\tshift: proxiedShift,\n\t\tunshift: proxiedUnshift,\n\t\treverse: proxiedReverse,\n\t\tsort: proxiedSort,\n\t\tfill: proxiedFill,\n\t\tcopyWithin: proxiedCopyWithin,\n\t\tsplice: proxiedSplice\n\t},\n\tproxiedTypedArrayMethods = {\n\t\treverse: proxiedReverse,\n\t\tsort: proxiedSort,\n\t\tfill: proxiedFill,\n\t\tcopyWithin: proxiedCopyWithin,\n\t\tset: proxiedTypedArraySet\n\t};\n\nclass OMetaBase {\n\tconstructor(properties, cloningFunction) {\n\t\tconst { target, parent, ownKey } = properties;\n\t\tif (parent && ownKey !== undefined) {\n\t\t\tthis.parent = parent;\n\t\t\tthis.ownKey = ownKey;\n\t\t} else {\n\t\t\tthis.parent = null;\n\t\t\tthis.ownKey = null;\n\t\t}\n\t\tconst targetClone = cloningFunction(target, this);\n\t\tthis.observers = [];\n\t\tthis.revocable = Proxy.revocable(targetClone, this);\n\t\tthis.proxy = this.revocable.proxy;\n\t\tthis.target = targetClone;\n\t\tthis.options = this.processOptions(properties.options);\n\t}\n\n\tprocessOptions(options) {\n\t\tif (options) {\n\t\t\tif (typeof options !== 'object') {\n\t\t\t\tthrow new Error(`Observable options if/when provided, MAY only be an object, got '${options}'`);\n\t\t\t}\n\t\t\tconst invalidOptions = Object.keys(options).filter(option => !validObservableOptionKeys.hasOwnProperty(option));\n\t\t\tif (invalidOptions.length) {\n\t\t\t\tthrow new Error(`'${invalidOptions.join(', ')}' is/are not a valid Observable option/s`);\n\t\t\t}\n\t\t\treturn Object.assign({}, options);\n\t\t} else {\n\t\t\treturn {};\n\t\t}\n\t}\n\n\tdetach() {\n\t\tthis.parent = null;\n\t\treturn this.target;\n\t}\n\n\tset(target, key, value) {\n\t\tlet oldValue = target[key];\n\n\t\tif (value !== oldValue) {\n\t\t\tconst newValue = getObservedOf(value, key, this);\n\t\t\ttarget[key] = newValue;\n\n\t\t\tif (oldValue && typeof oldValue === 'object') {\n\t\t\t\tconst tmpObserved = oldValue[oMetaKey];\n\t\t\t\tif (tmpObserved) {\n\t\t\t\t\toldValue = tmpObserved.detach();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst changes = oldValue === undefined\n\t\t\t\t? [{ type: INSERT, path: [key], value: newValue, object: this.proxy }]\n\t\t\t\t: [{ type: UPDATE, path: [key], value: newValue, oldValue: oldValue, object: this.proxy }];\n\t\t\tcallObservers(this, changes);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tdeleteProperty(target, key) {\n\t\tlet oldValue = target[key];\n\n\t\tdelete target[key];\n\n\t\tif (oldValue && typeof oldValue === 'object') {\n\t\t\tconst tmpObserved = oldValue[oMetaKey];\n\t\t\tif (tmpObserved) {\n\t\t\t\toldValue = tmpObserved.detach();\n\t\t\t}\n\t\t}\n\n\t\tconst changes = [{ type: DELETE, path: [key], oldValue: oldValue, object: this.proxy }];\n\t\tcallObservers(this, changes);\n\n\t\treturn true;\n\t}\n}\n\nclass ObjectOMeta extends OMetaBase {\n\tconstructor(properties) {\n\t\tsuper(properties, prepareObject);\n\t}\n}\n\nclass ArrayOMeta extends OMetaBase {\n\tconstructor(properties) {\n\t\tsuper(properties, prepareArray);\n\t}\n\n\tget(target, key) {\n\t\tif (proxiedArrayMethods.hasOwnProperty(key)) {\n\t\t\treturn proxiedArrayMethods[key];\n\t\t} else {\n\t\t\treturn target[key];\n\t\t}\n\t}\n}\n\nclass TypedArrayOMeta extends OMetaBase {\n\tconstructor(properties) {\n\t\tsuper(properties, prepareTypedArray);\n\t}\n\n\tget(target, key) {\n\t\tif (proxiedTypedArrayMethods.hasOwnProperty(key)) {\n\t\t\treturn proxiedTypedArrayMethods[key];\n\t\t} else {\n\t\t\treturn target[key];\n\t\t}\n\t}\n}\n\nclass Observable {\n\tconstructor() {\n\t\tthrow new Error('Observable MAY NOT be created via constructor, see \"Observable.from\" API');\n\t}\n\n\tstatic from(target, options) {\n\t\tif (!target || typeof target !== 'object') {\n\t\t\tthrow new Error('observable MAY ONLY be created from a non-null object');\n\t\t} else if (target[oMetaKey]) {\n\t\t\treturn target;\n\t\t} else if (Array.isArray(target)) {\n\t\t\treturn new ArrayOMeta({ target: target, ownKey: null, parent: null, options: options }).proxy;\n\t\t} else if (ArrayBuffer.isView(target)) {\n\t\t\treturn new TypedArrayOMeta({ target: target, ownKey: null, parent: null, options: options }).proxy;\n\t\t} else if (target instanceof Date || target instanceof Error) {\n\t\t\tthrow new Error(`${target} found to be one of a on-observable types`);\n\t\t} else {\n\t\t\treturn new ObjectOMeta({ target: target, ownKey: null, parent: null, options: options }).proxy;\n\t\t}\n\t}\n\n\tstatic isObservable(input) {\n\t\treturn !!(input && input[oMetaKey]);\n\t}\n}\n\nObject.freeze(Observable);\n\nexport { Observable };","import _g from \"./g\";\nimport { Globals } from \"./types\";\n\nexport default function utilsFactory(globals?: Globals): any {\n    const g = globals || _g;\n\n    const generateBareUrl = (type: string, integrationID: string): string => `https://api.easybase.io/${type}/${integrationID}`;\n\n    const generateAuthBody = (): any => {\n        const stamp = Date.now();\n        return {\n            token: g.token,\n            token_time: ~~(g.session / (stamp % 64)),\n            now: stamp\n        }\n    }\n    \n    function log(...params: any): void {\n        if (g.options.logging) {\n            console.log(\"EASYBASE — \", ...params);\n        }\n    }\n\n    return {\n        generateAuthBody,\n        generateBareUrl,\n        log\n    }\n}\n","import { POST_TYPES, AuthPostResponse, Globals, StatusResponse, EmailTemplate } from \"./types\";\nimport _g from \"./g\";\nimport utilsFactory from \"./utils\";\nimport fetch from 'cross-fetch';\n\nexport default function authFactory(globals?: Globals): any {\n    const g = globals || _g;\n\n    const { generateBareUrl, generateAuthBody, log } = utilsFactory(g);\n\n    function _clearTokens() {\n        g.token = \"\";\n        g.refreshToken = \"\";\n        g.newTokenCallback();\n        g.userID = undefined;\n    }\n\n    const getUserAttributes = async (): Promise<Record<string, string>> => {\n        try {\n            const attrsRes = await tokenPost(POST_TYPES.USER_ATTRIBUTES);\n            g.analytics && g.analytics.track('getUserAttributes');\n            return attrsRes.data;\n        } catch (error) {\n            log(error)\n            return error;\n        }\n    }\n\n    const setUserAttribute = async (key: string, value: string): Promise<StatusResponse> => {\n        try {\n            const setAttrsRes = await tokenPost(POST_TYPES.SET_ATTRIBUTE, {\n                key,\n                value\n            });\n            g.analytics && g.analytics.track('setUserAttribute');\n            return {\n                success: setAttrsRes.success,\n                message: JSON.stringify(setAttrsRes.data)\n            };\n        } catch (error) {\n            return {\n                success: false,\n                message: error.message || \"Error\",\n                errorCode: error.errorCode || undefined\n            };\n        }\n    }\n\n    const forgotPassword = async (username: string, emailTemplate?: EmailTemplate): Promise<StatusResponse> => {\n        try {\n            const setAttrsRes = await tokenPost(POST_TYPES.FORGOT_PASSWORD_SEND, {\n                username,\n                emailTemplate\n            });\n            g.analytics && g.analytics.track('forgotPassword');\n            return {\n                success: setAttrsRes.success,\n                message: setAttrsRes.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                message: error.message || \"Error\",\n                errorCode: error.errorCode || undefined\n            };\n        }\n    }\n\n    const forgotPasswordConfirm = async (code: string, username: string, newPassword: string): Promise<StatusResponse> => {\n        try {\n            const setAttrsRes = await tokenPost(POST_TYPES.FORGOT_PASSWORD_CONFIRM, {\n                username,\n                code,\n                newPassword\n            });\n            g.analytics && g.analytics.track('forgotPasswordConfirm');\n            return {\n                success: setAttrsRes.success,\n                message: setAttrsRes.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                message: error.message || \"Error\",\n                errorCode: error.errorCode || undefined\n            };\n        }\n    }\n\n    const signUp = async (newUserID: string, password: string, userAttributes?: Record<string, string>): Promise<StatusResponse> => {\n        try {\n            const signUpRes = await tokenPost(POST_TYPES.SIGN_UP, {\n                newUserID,\n                password,\n                userAttributes\n            });\n            g.analytics && g.analytics.track('signUp');\n            return {\n                success: signUpRes.success,\n                message: signUpRes.data\n            }\n        } catch (error) {\n            return {\n                success: false,\n                message: error.message || \"Error\",\n                errorCode: error.errorCode || undefined\n            }\n        }\n    }\n\n    const signIn = async (userID: string, password: string): Promise<StatusResponse> => {\n        const t1 = Date.now();\n        g.session = Math.floor(100000000 + Math.random() * 900000000);\n\n        const integrationType = g.ebconfig.integration.split(\"-\")[0].toUpperCase() === \"PROJECT\" ? \"PROJECT\" : \"REACT\";\n\n        try {\n            const res = await fetch(generateBareUrl(integrationType, g.integrationID), {\n                method: \"POST\",\n                headers: {\n                    'Eb-Post-Req': POST_TYPES.HANDSHAKE,\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    version: g.ebconfig.version,\n                    session: g.session,\n                    instance: g.instance,\n                    userID,\n                    password\n                })\n            });\n\n            const resData = await res.json();\n\n            if (resData.token) {\n                g.token = resData.token;\n                g.refreshToken = resData.refreshToken;\n                g.newTokenCallback();\n                g.userID = resData.userID;\n                g.mounted = true;\n                const validTokenRes = await tokenPost(POST_TYPES.VALID_TOKEN);\n                const elapsed = Date.now() - t1;\n                if (validTokenRes.success) {\n                    log(\"Valid auth initiation in \" + elapsed + \"ms\");\n                    if (g.analytics) {\n                        import('@aws-crypto/sha256-universal').then(c => {\n                            const hash = new c.Sha256();\n                            hash.update(g.GA_AUTH_SALT + resData.userID);\n                            hash.digest().then(hashOut => {\n                                const hexHash = Array.prototype.map.call(hashOut, x => ('00' + x.toString(16)).slice(-2)).join('');\n                                g.analytics?.identify(hexHash);\n                                g.analytics?.track('signIn');\n                            });\n                        })\n                    }\n\n                    return {\n                        success: true,\n                        message: \"Successfully signed in user\"\n                    };\n                } else {\n                    return {\n                        success: false,\n                        message: \"Could not sign in user\"\n                    };\n                }\n            } else {\n                return {\n                    success: false,\n                    message: \"Could not sign in user\",\n                    errorCode: resData.ErrorCode || undefined\n                };\n            }\n        } catch (error) {\n            return {\n                success: false,\n                message: error.message || \"Could not sign in user\",\n                errorCode: error.errorCode || undefined\n            };\n        }\n    }\n\n    const resetUserPassword = async (currentPassword: string, newPassword: string): Promise<StatusResponse> => {\n        if (typeof newPassword !== \"string\" || newPassword.length > 100) {\n            return {\n                success: false,\n                message: \"newPassword must be of type string\"\n            };\n        }\n\n        if (typeof currentPassword !== \"string\" || currentPassword.length > 100) {\n            return {\n                success: false,\n                message: \"currentPassword must be of type string\"\n            };\n        }\n\n        try {\n            const setAttrsRes = await tokenPost(POST_TYPES.RESET_PASSWORD, { currentPassword, newPassword });\n            g.analytics && g.analytics.track('resetUserPassword');\n\n            return {\n                success: setAttrsRes.success,\n                message: JSON.stringify(setAttrsRes.data)\n            };\n        } catch (error) {\n            return {\n                success: false,\n                message: error.message || \"Error\",\n                errorCode: error.errorCode || undefined\n            };\n        }\n    }\n\n    const userID = (): string | undefined => g.userID || undefined;\n\n    const signOut = (): void => {\n        g.token = \"\";\n        g.newTokenCallback();\n        g.userID = undefined;\n    }\n\n    const initAuth = async (): Promise<boolean> => {\n        const t1 = Date.now();\n        g.session = Math.floor(100000000 + Math.random() * 900000000);\n\n        log(`Handshaking on${g.instance} instance`);\n\n        const integrationType = g.ebconfig.integration.split(\"-\")[0].toUpperCase() === \"PROJECT\" ? \"PROJECT\" : \"REACT\";\n\n        try {\n            const res = await fetch(generateBareUrl(integrationType, g.integrationID), {\n                method: \"POST\",\n                headers: {\n                    'Eb-Post-Req': POST_TYPES.HANDSHAKE,\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    version: g.ebconfig.version,\n                    tt: g.ebconfig.tt,\n                    session: g.session,\n                    instance: g.instance\n                })\n            });\n\n            const resData = await res.json();\n\n            if (resData.token) {\n                g.token = resData.token;\n                g.mounted = true;\n                const validTokenRes = await tokenPost(POST_TYPES.VALID_TOKEN);\n                const elapsed = Date.now() - t1;\n                if (validTokenRes.success) {\n                    log(\"Valid auth initiation in \" + elapsed + \"ms\");\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } catch (error) {\n            console.error(error);\n            return false;\n        }\n    }\n\n    const tokenPost = async (postType: POST_TYPES, body?: {}): Promise<AuthPostResponse> => {\n        if (!g.mounted) {\n            await initAuth();\n        }\n\n        const integrationType = g.ebconfig.integration.split(\"-\")[0].toUpperCase() === \"PROJECT\" ? \"PROJECT\" : \"REACT\";\n\n        const res = await fetch(generateBareUrl(integrationType, g.integrationID), {\n            method: \"POST\",\n            headers: {\n                'Eb-Post-Req': postType,\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                _auth: generateAuthBody(),\n                ...body\n            })\n        });\n\n        const resData = await res.json();\n\n        if ({}.hasOwnProperty.call(resData, 'ErrorCode') || {}.hasOwnProperty.call(resData, 'code')) {\n            if (resData.ErrorCode === \"TokenExpired\") {\n                if (integrationType === \"PROJECT\") {\n                    try {\n                        const req_res = await tokenPost(POST_TYPES.REQUEST_TOKEN, {\n                            refreshToken: g.refreshToken,\n                            token: g.token\n                        });\n                        if (req_res.success) {\n                            g.token = req_res.data.token\n                            g.newTokenCallback();\n                            return tokenPost(postType, body);\n                        } else {\n                            throw new Error(req_res.data || \"Error\");\n                        }\n                    } catch (error) {\n                        _clearTokens();\n                        return {\n                            success: false,\n                            data: error.message || error\n                        }\n                    }\n                } else {\n                    await initAuth();\n                }\n                return tokenPost(postType, body);\n            } else {\n                const err = new Error(resData.body || resData.ErrorCode || resData.code || \"Error\");\n                (err as any).errorCode = resData.ErrorCode || resData.code;\n                throw err;\n            }\n        } else {\n            return {\n                success: resData.success,\n                data: resData.body\n            }\n        }\n    }\n\n    const tokenPostAttachment = async (formData: FormData, customHeaders: {}): Promise<AuthPostResponse> => {\n        if (!g.mounted) {\n            await initAuth();\n        }\n\n        const regularAuthbody = generateAuthBody();\n\n        const attachmentAuth = {\n            'Eb-token': regularAuthbody.token,\n            'Eb-token-time': regularAuthbody.token_time,\n            'Eb-now': regularAuthbody.now\n        };\n\n        const integrationType = g.ebconfig.integration.split(\"-\")[0].toUpperCase() === \"PROJECT\" ? \"PROJECT\" : \"REACT\";\n\n        const res = await fetch(generateBareUrl(integrationType, g.integrationID), {\n            method: \"POST\",\n            headers: {\n                'Eb-Post-Req': POST_TYPES.UPLOAD_ATTACHMENT,\n                ...customHeaders,\n                ...attachmentAuth\n            },\n            body: formData\n        });\n\n        const resData = await res.json();\n\n        if ({}.hasOwnProperty.call(resData, 'ErrorCode') || {}.hasOwnProperty.call(resData, 'code')) {\n            if (resData.ErrorCode === \"TokenExpired\") {\n                if (integrationType === \"PROJECT\") {\n                    try {\n                        const req_res = await tokenPost(POST_TYPES.REQUEST_TOKEN, {\n                            refreshToken: g.refreshToken,\n                            token: g.token\n                        });\n\n                        if (req_res.success) {\n                            g.token = req_res.data.token\n                            g.newTokenCallback();\n                            return tokenPostAttachment(formData, customHeaders);\n                        } else {\n                            throw new Error(req_res.data || \"Error\");\n                        }\n                    } catch (error) {\n                        _clearTokens();\n                        return {\n                            success: false,\n                            data: error.message || error\n                        }\n                    }\n                } else {\n                    await initAuth();\n                }\n                return tokenPostAttachment(formData, customHeaders);\n            } else {\n                const err = new Error(resData.body || resData.ErrorCode || resData.code || \"Error\");\n                (err as any).errorCode = resData.ErrorCode || resData.code;\n                throw err;\n            }\n        } else {\n            return {\n                success: resData.success,\n                data: resData.body\n            }\n        }\n    }\n\n    return {\n        initAuth,\n        tokenPost,\n        tokenPostAttachment,\n        signUp,\n        setUserAttribute,\n        getUserAttributes,\n        signIn,\n        signOut,\n        resetUserPassword,\n        forgotPassword,\n        forgotPasswordConfirm,\n        userID\n    }\n}\n","import {\n    POST_TYPES,\n    QueryOptions,\n    Globals\n} from \"./types\";\nimport _g from \"./g\";\n\nimport authFactory from \"./auth\";\n\nexport default function tableFactory(globals?: Globals): any {\n\n    const g = globals || _g;\n\n    const { tokenPost } = authFactory(g);\n\n    const Query = async (options: QueryOptions): Promise<Record<string, any>[]> => {\n        const defaultOptions: QueryOptions = {\n            queryName: \"\"\n        }\n    \n        const fullOptions: QueryOptions = { ...defaultOptions, ...options };\n\n        const res = await tokenPost(POST_TYPES.GET_QUERY, fullOptions);\n        if (res.success) {\n            return res.data\n        } else {\n            return [];\n        }\n    }\n\n    async function fullTableSize(): Promise<number>;\n    async function fullTableSize(tableName: string): Promise<number>;\n    async function fullTableSize(tableName?: string): Promise<number> {\n        const res = await tokenPost(POST_TYPES.TABLE_SIZE, tableName ? { tableName } : {});\n        if (res.success) {\n            return res.data;\n        } else {\n            return 0;\n        }\n    }\n\n    async function tableTypes(): Promise<Record<string, any>>;\n    async function tableTypes(tableName: string): Promise<Record<string, any>>\n    async function tableTypes(tableName?: string): Promise<Record<string, any>> {\n        const res = await tokenPost(POST_TYPES.COLUMN_TYPES, tableName ? { tableName } : {});\n        if (res.success) {\n            return res.data;\n        } else {\n            return {};\n        }\n    }\n\n    return {\n        Query,\n        fullTableSize,\n        tableTypes\n    };\n}","import _g from \"./g\";\nimport easyqb from 'easyqb';\nimport { SQW } from \"easyqb/types/sq\";\nimport { NewExpression } from \"easyqb/types/expression\";\nimport authFactory from \"./auth\";\nimport { POST_TYPES, DB_STATUS, Globals, EXECUTE_COUNT } from \"./types\";\n\ninterface IdbFactory {\n    db: (tableName?: string, userAssociatedRecordsOnly?: boolean) => SQW;\n    dbEventListener: (callback: (status?: DB_STATUS, queryType?: string, executeCount?: EXECUTE_COUNT, tableName?: string | null, returned?: any) => void) => () => void;\n    e: NewExpression;\n}\n\nexport default function dbFactory(globals?: Globals): IdbFactory {\n    const g = globals || _g;\n    const { tokenPost } = authFactory(g);\n    let _listenerIndex = 0;\n\n    const _listeners: Record<string, (status?: DB_STATUS, queryType?: string, executeCount?: EXECUTE_COUNT, tableName?: string | null, returned?: any) => void> = {};\n\n    function _runListeners(...params: any[]) {\n        for (const cb of Object.values(_listeners)) {\n            cb(...params)\n        }\n    }\n\n    const dbEventListener = (callback: (status?: DB_STATUS, queryType?: string, executeCount?: EXECUTE_COUNT, tableName?: string | null, returned?: any) => void): () => void => {\n        const currKey = '' + _listenerIndex++;\n        _listeners[currKey] = callback;\n        return () => {\n            delete _listeners[currKey]\n        }\n    }\n\n    const allCallback = async (trx: any, tableName: string, userAssociatedRecordsOnly?: boolean): Promise<Record<string, any>[] | number[]> => {\n        trx.count = \"all\";\n        trx.tableName = tableName;\n        if (userAssociatedRecordsOnly) trx.userAssociatedRecordsOnly = userAssociatedRecordsOnly;\n        _runListeners(DB_STATUS.PENDING, trx.type, EXECUTE_COUNT.ALL, tableName !== \"untable\" ? tableName : null);\n        try {\n            const res = await tokenPost(POST_TYPES.EASY_QB, trx);\n            if (res.success) {\n                _runListeners(DB_STATUS.SUCCESS, trx.type, EXECUTE_COUNT.ALL, tableName !== \"untable\" ? tableName : null, res.data);\n                return res.data;\n            } else {\n                _runListeners(DB_STATUS.ERROR, trx.type, EXECUTE_COUNT.ALL, tableName !== \"untable\" ? tableName : null);\n                return res;\n            }\n        } catch (error) {\n            console.warn(error)\n            _runListeners(DB_STATUS.ERROR, trx.type, EXECUTE_COUNT.ALL, tableName !== \"untable\" ? tableName : null);\n            return [];\n        }\n    }\n\n    const oneCallback = async (trx: any, tableName: string, userAssociatedRecordsOnly?: boolean): Promise<Record<string, any> | number> => {\n        trx.count = \"one\";\n        trx.tableName = tableName;\n        if (userAssociatedRecordsOnly) trx.userAssociatedRecordsOnly = userAssociatedRecordsOnly;\n        _runListeners(DB_STATUS.PENDING, trx.type, EXECUTE_COUNT.ONE, tableName !== \"untable\" ? tableName : null);\n        try {\n            const res = await tokenPost(POST_TYPES.EASY_QB, trx);\n            if (res.success) {\n                _runListeners(DB_STATUS.SUCCESS, trx.type, EXECUTE_COUNT.ONE, tableName !== \"untable\" ? tableName : null, res.data);\n                return res.data;\n            } else {\n                _runListeners(DB_STATUS.ERROR, trx.type, EXECUTE_COUNT.ONE, tableName !== \"untable\" ? tableName : null);\n                return res;\n            }\n        } catch (error) {\n            console.warn(error)\n            _runListeners(DB_STATUS.ERROR, trx.type, EXECUTE_COUNT.ONE, tableName !== \"untable\" ? tableName : null);\n            return {};\n        }\n    }\n\n    const db = (tableName?: string, userAssociatedRecordsOnly?: boolean) => {\n        if (tableName && typeof tableName === \"string\") {\n            return easyqb({ allCallback, oneCallback, userAssociatedRecordsOnly, tableName: tableName.toUpperCase() })(tableName.replace(/[^0-9a-zA-Z]/g, '_').toUpperCase());\n        } else {\n            return easyqb({ allCallback, oneCallback, userAssociatedRecordsOnly, tableName: \"untable\" })(\"untable\");\n        }\n    }\n    \n    return {\n        db,\n        dbEventListener,\n        e: easyqb().e\n    }\n}\n","import {\n    EasybaseProviderProps,\n    FrameConfiguration,\n    POST_TYPES,\n    FileFromURI,\n    ContextValue,\n    AddRecordOptions,\n    StatusResponse,\n    ConfigureFrameOptions,\n    UpdateRecordAttachmentOptions,\n    DeleteRecordOptions\n} from \"./types\";\nimport { gFactory } from \"./g\";\nimport deepEqual from \"fast-deep-equal\";\nimport { Observable } from \"./object-observer\";\nimport imageExtensions from \"./assets/image-extensions.json\";\nimport videoExtensions from \"./assets/video-extensions.json\";\nimport authFactory from \"./auth\";\nimport utilsFactory from \"./utils\";\nimport tableFactory from \"./table\";\nimport dbFactory from './db';\n\nexport default function EasybaseProvider({ ebconfig, options }: EasybaseProviderProps): ContextValue {\n\n    if (typeof ebconfig !== 'object' || ebconfig === null || ebconfig === undefined) {\n        console.error(\"No ebconfig object passed. do `import ebconfig from \\\"./ebconfig.js\\\"` and pass it to the Easybase provider\");\n        return;\n    } else if (!ebconfig.integration) {\n        console.error(\"Invalid ebconfig object passed. Download ebconfig.js from Easybase.io and try again.\");\n        return;\n    }\n\n    const g = gFactory(ebconfig, options);\n\n    const {\n        tokenPost,\n        tokenPostAttachment,\n        signUp,\n        setUserAttribute,\n        getUserAttributes,\n        signIn,\n        signOut,\n        resetUserPassword,\n        forgotPassword,\n        forgotPasswordConfirm,\n        userID\n    } = authFactory(g);\n\n    const {\n        Query,\n        fullTableSize,\n        tableTypes\n    } = tableFactory(g);\n\n    const {\n        db,\n        dbEventListener,\n        e\n    } = dbFactory(g);\n\n    const { log } = utilsFactory(g);\n\n    // eslint-disable-next-line dot-notation\n    const isIE = typeof document !== 'undefined' && !!document['documentMode'];\n\n    if (isIE) {\n        console.error(\"EASYBASE — easybasejs does not support Internet Explorer. Please use a different browser.\");\n    }\n\n    if (g.ebconfig.tt && g.ebconfig.integration.split(\"-\")[0].toUpperCase() !== \"PROJECT\") {\n        g.mounted = false;\n    } else {\n        g.mounted = true;\n    }\n    g.instance = \"Node\";\n\n    let _isFrameInitialized = true;\n    let _frameConfiguration: FrameConfiguration = {\n        offset: 0,\n        limit: 0\n    };\n    const _observedChangeStack: Record<string, any>[] = [];\n    let _recordIdMap: WeakMap<Record<string, any>, \"string\"> = new WeakMap();\n    let _observableFrame = {\n        observe: (_) => { },\n        unobserve: () => { }\n    }\n    let _frame: Record<string, any>[] = [];\n\n    let isSyncing = false;\n\n    function Frame(): Record<string, any>[];\n    function Frame(index: number): Record<string, any>;\n    function Frame(index?: number): Record<string, any>[] | Record<string, any> {\n        if (typeof index === \"number\") {\n            return _observableFrame[index];\n        } else {\n            return _observableFrame;\n        }\n    }\n\n    const _recordIDExists = (record: Record<string, any>): Boolean => !!_recordIdMap.get(record);\n\n    const configureFrame = (options: ConfigureFrameOptions): StatusResponse => {\n        _frameConfiguration = { ..._frameConfiguration };\n\n        if (options.limit !== undefined) _frameConfiguration.limit = options.limit;\n        if (options.offset !== undefined && options.offset >= 0) _frameConfiguration.offset = options.offset;\n        if (options.tableName !== undefined) _frameConfiguration.tableName = options.tableName;\n\n        _isFrameInitialized = false;\n        return {\n            message: \"Successfully configured frame. Run sync() for changes to be shown in frame\",\n            success: true\n        }\n    }\n\n    const currentConfiguration = (): FrameConfiguration => ({ ..._frameConfiguration });\n\n    const deleteRecord = async (options: DeleteRecordOptions): Promise<StatusResponse> => {\n        const _frameRecord = _frame.find(ele => deepEqual(ele, options.record));\n\n        if (_frameRecord && _recordIdMap.get(_frameRecord)) {\n            const res = await tokenPost(POST_TYPES.SYNC_DELETE, {\n                _id: _recordIdMap.get(_frameRecord),\n                tableName: options.tableName\n            });\n            return {\n                success: res.success,\n                message: res.data\n            }\n        } else {\n            try {\n                const res = await tokenPost(POST_TYPES.SYNC_DELETE, {\n                    record: options.record,\n                    tableName: options.tableName\n                });\n                return {\n                    success: res.success,\n                    message: res.data\n                }\n            } catch (error) {\n                console.error(\"Easybase Error: deleteRecord failed \", error);\n                return {\n                    success: false,\n                    message: \"Easybase Error: deleteRecord failed \" + error,\n                    errorCode: error.errorCode || undefined\n                }\n            }\n        }\n    }\n\n    const addRecord = async (options: AddRecordOptions): Promise<StatusResponse> => {\n        const defaultValues: AddRecordOptions = {\n            insertAtEnd: false,\n            newRecord: {},\n            tableName: undefined\n        }\n\n        const fullOptions: AddRecordOptions = { ...defaultValues, ...options };\n\n        try {\n            const res = await tokenPost(POST_TYPES.SYNC_INSERT, fullOptions);\n            return {\n                message: res.data,\n                success: res.success\n            }\n        } catch (error) {\n            console.error(\"Easybase Error: addRecord failed \", error);\n            return {\n                message: \"Easybase Error: addRecord failed \" + error,\n                success: false,\n                errorCode: error.errorCode || undefined\n            }\n        }\n    }\n\n    // Only allow the deletion of one element at a time\n    // First handle shifting of the array size. Then iterate\n    const sync = async (): Promise<StatusResponse> => {\n        const _realignFrames = (newData: Record<string, any>[]) => {\n            let isNewDataTheSame = true;\n\n            if (newData.length !== _frame.length) {\n                isNewDataTheSame = false;\n            } else {\n                for (let i = 0; i < newData.length; i++) {\n                    const newDataNoId = { ...newData[i] };\n                    delete newDataNoId._id;\n                    if (!deepEqual(newDataNoId, _frame[i])) {\n                        isNewDataTheSame = false;\n                        break;\n                    }\n                }\n            }\n\n            if (!isNewDataTheSame) {\n                const oldframe = [..._frame];\n                oldframe.length = newData.length;\n                _recordIdMap = new WeakMap();\n                for (let i = 0; i < newData.length; i++) {\n                    const currNewEle = newData[i];\n                    _recordIdMap.set(currNewEle, currNewEle._id);\n                    delete currNewEle._id;\n                    oldframe[i] = currNewEle;\n                }\n                _frame = oldframe;\n                _observableFrame.unobserve();\n                _observableFrame = Observable.from(_frame);\n\n                _observableFrame.observe((allChanges: any[]) => {\n                    allChanges.forEach((change: any) => {\n                        _observedChangeStack.push({\n                            type: change.type,\n                            path: change.path,\n                            value: change.value,\n                            _id: _recordIdMap.get(_frame[Number(change.path[0])])\n                            // Not bringing change.object or change.oldValue\n                        });\n                        log(JSON.stringify({\n                            type: change.type,\n                            path: change.path,\n                            value: change.value,\n                            _id: _recordIdMap.get(_frame[Number(change.path[0])])\n                            // Not bringing change.object or change.oldValue\n                        }))\n                    });\n                });\n            }\n        }\n\n        if (isSyncing) {\n            return {\n                success: false,\n                message: \"Easybase Error: the provider is currently syncing, use 'await sync()' before calling sync() again\"\n            };\n        }\n\n        isSyncing = true;\n\n        if (_isFrameInitialized) {\n            if (_observedChangeStack.length > 0) {\n                log(\"Stack change: \", _observedChangeStack);\n                const res = await tokenPost(POST_TYPES.SYNC_STACK, {\n                    stack: _observedChangeStack,\n                    ..._frameConfiguration\n                });\n                if (res.success) {\n                    _observedChangeStack.length = 0;\n                }\n            }\n        }\n\n        try {\n            const res = await tokenPost(POST_TYPES.GET_FRAME, _frameConfiguration);\n\n            // Check if the array recieved from db is the same as frame\n            // If not, update it and send useFrameEffect\n\n            if (res.success === false) {\n                console.error(res.data);\n                isSyncing = false;\n                return {\n                    success: false,\n                    message: \"\" + res.data\n                }\n            } else {\n                _isFrameInitialized = true;\n                _realignFrames(res.data);\n                isSyncing = false;\n                return {\n                    message: 'Success. Call frame for data',\n                    success: true\n                }\n            }\n        } catch (error) {\n            console.error(\"Easybase Error: get failed \", error);\n            isSyncing = false;\n            return {\n                success: false,\n                message: \"Easybase Error: get failed \" + error,\n                errorCode: error.errorCode || undefined\n            }\n        }\n    }\n\n    const updateRecordImage = async (options: UpdateRecordAttachmentOptions): Promise<StatusResponse> => {\n        const res = await _updateRecordAttachment(options, \"image\");\n        return res;\n    }\n    const updateRecordVideo = async (options: UpdateRecordAttachmentOptions): Promise<StatusResponse> => {\n        const res = await _updateRecordAttachment(options, \"video\");\n        return res;\n    }\n    const updateRecordFile = async (options: UpdateRecordAttachmentOptions): Promise<StatusResponse> => {\n        const res = await _updateRecordAttachment(options, \"file\");\n        return res;\n    }\n\n    const _updateRecordAttachment = async (options: UpdateRecordAttachmentOptions, type: string): Promise<StatusResponse> => {\n        const _frameRecord: Record<string, any> | undefined = _frame.find(ele => deepEqual(ele, options.record));\n\n        if (_frameRecord === undefined || !_recordIDExists(_frameRecord)) {\n            log(\"Attempting to add attachment to a new record that has not been synced. Please sync() before trying to add attachment.\");\n            return {\n                success: false,\n                message: \"Attempting to add attachment to a new record that has not been synced. Please sync() before trying to add attachment.\"\n            }\n        }\n\n        const ext: string = options.attachment.name.split(\".\").pop()!.toLowerCase();\n\n        log(ext);\n\n        if (type === \"image\" && !imageExtensions.includes(ext)) {\n            return {\n                success: false,\n                message: \"Image files must have a proper image extension in the file name\"\n            };\n        }\n\n        if (type === \"video\" && !videoExtensions.includes(ext)) {\n            return {\n                success: false,\n                message: \"Video files must have a proper video extension in the file name\"\n            };\n        }\n\n        function isFileFromURI(f: File | FileFromURI): f is FileFromURI {\n            return (f as FileFromURI).uri !== undefined;\n        }\n\n        const formData = new FormData();\n\n        if (isFileFromURI(options.attachment)) {\n            formData.append(\"file\", options.attachment as any);\n            formData.append(\"name\", options.attachment.name);\n        } else {\n            formData.append(\"file\", options.attachment);\n            formData.append(\"name\", options.attachment.name);\n        }\n\n        const customHeaders = {\n            'Eb-upload-type': type,\n            'Eb-column-name': options.columnName,\n            'Eb-record-id': _recordIdMap.get(_frameRecord),\n            'Eb-table-name': options.tableName\n        }\n\n        const res = await tokenPostAttachment(formData, customHeaders);\n\n        await sync();\n\n        return {\n            message: res.data,\n            success: res.success\n        };\n    }\n\n    const c: ContextValue = {\n        /** +++ Will be deprecated */\n        configureFrame,\n        addRecord,\n        deleteRecord,\n        sync,\n        Frame,\n        currentConfiguration,\n        /** --- */\n        updateRecordImage,\n        updateRecordVideo,\n        updateRecordFile,\n        fullTableSize,\n        tableTypes,\n        Query,\n        signIn,\n        signOut,\n        signUp,\n        resetUserPassword,\n        setUserAttribute,\n        getUserAttributes,\n        db,\n        dbEventListener,\n        e,\n        forgotPassword,\n        forgotPasswordConfirm,\n        userID\n    }\n\n    return c;\n}\n","import fetch from 'cross-fetch';\n\nexport { default as EasybaseProvider } from \"./EasybaseProvider/EasybaseProvider\";\n\nconst generateBareUrl = (type, integrationID) => `https://api.easybase.io/${type}/${integrationID}`;\nconst isBadInt = (my_int) => my_int !== undefined && my_int !== null && Math.floor(my_int) !== my_int;\nconst isBadString = (my_string) => my_string !== undefined && my_string !== null && typeof my_string !== \"string\";\nconst isBadIntegrationID = (my_string) => my_string === undefined || my_string === null || typeof my_string !== \"string\";\nconst isBadObject = (my_obj) => my_obj !== undefined && my_obj !== null && typeof my_obj !== \"object\";\nconst isBadBool = (my_bool) => my_bool !== undefined && my_bool !== null && typeof my_bool !== \"boolean\";\n\ninterface GetOptions {\n    /** EasyBase integration ID. Can be found by expanding the integration menu. This id is automatically generated.  */\n    integrationID: string;\n    /** Edit starting index from which records will be retrieved from. Useful for paging. */\n    offset?: number;\n    /** Limit the amount of records to be retrieved. Can be used in combination with offset. */\n    limit?: number;\n    /** Custom authentication string. Can be set in integration menu. If it is set, it is required to access integration. This acts as an extra layer of security and extensibility. */\n    authentication?: string;\n    /** This object can be set to overwrite the query values as set in the integration menu. If your query is setup to find records where 'age' >= 0, passing in { age: 50 } will query where 'age' >= 50. */\n    customQuery?: Record<string, unknown>;\n}\n\n/**\n * \n * @param {GetOptions} options GetOptions.\n * @returns {Promise<Array>} Array of records.\n * \n */\nexport function get(options: GetOptions): Promise<Array<Record<string, unknown>>> {\n\n    const defaultOptions: GetOptions = {\n        integrationID: \"\",\n        offset: undefined,\n        limit: undefined,\n        authentication: undefined,\n        customQuery: undefined\n    }\n    const { integrationID, offset, limit, authentication, customQuery } = { ...defaultOptions, ...options };\n\n    if (isBadIntegrationID(integrationID)) throw new Error(\"integrationID is required and must be a string\");\n    if (isBadInt(offset)) throw new Error(\"offset must be an integer\");\n    if (isBadInt(limit)) throw new Error(\"limit must be an integer\");\n    if (isBadString(authentication)) throw new Error(\"authentication must be a string or null\");\n    if (isBadObject(customQuery)) throw new Error(\"customQuery must be an object or null\");\n\n    return new Promise((resolve, reject) => {\n        try {\n            let fetch_body: any = {};\n            if (typeof customQuery === \"object\") fetch_body = { ...customQuery };\n            if (offset !== undefined) fetch_body.offset = offset;\n            if (limit !== undefined) fetch_body.limit = limit;\n            if (authentication !== undefined) fetch_body.authentication = authentication;\n\n            fetch(generateBareUrl('get', integrationID), {\n                method: \"POST\",\n                body: JSON.stringify(fetch_body),\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            })\n                .then(res => res.json())\n                .then(resData => {\n                    if ({}.hasOwnProperty.call(resData, 'ErrorCode')) {\n                        console.error(resData.message);\n                        resolve([resData.message]);\n                    } else resolve(resData);\n                });\n        }\n        catch (err) { reject(err); }\n    });\n}\n\n\n\ninterface PostOptions {\n    /** EasyBase integration ID. Can be found by expanding the integration menu. This id is automatically generated.  */\n    integrationID: string;\n    /** Values to post to EasyBase collection. Format is { column name: value } */\n    newRecord: Record<string, unknown>;\n    /** Custom authentication string. Can be set in integration menu. If it is set, it is required to access integration. This acts as an extra layer of security and extensibility. */\n    authentication?: string;\n    /** If true, record will be inserted at the end of the collection rather than the front. */\n    insertAtEnd?: boolean;\n}\n\n/**\n * \n * @param {PostOptions} options PostOptions\n * @returns {Promise<String>} Post status.\n * \n */\nexport function post(options: PostOptions): Promise<string> {\n\n    const defaultValues: PostOptions = {\n        integrationID: \"\",\n        newRecord: undefined,\n        authentication: undefined,\n        insertAtEnd: undefined\n    }\n\n    const { integrationID, newRecord, authentication, insertAtEnd } = { ...defaultValues, ...options };\n\n    if (isBadIntegrationID(integrationID)) throw new Error(\"integrationID is required and must be a string\");\n    if (isBadObject(newRecord)) throw new Error(\"newRecord is required and must be a string\");\n    if (isBadString(authentication)) throw new Error(\"authentication must be a string or null\");\n    if (isBadBool(insertAtEnd)) throw new Error(\"insertAtEnd must be a boolean or null\");\n\n    return new Promise((resolve, reject) => {\n        try {\n            const fetch_body: any = { ...newRecord };\n            if (authentication !== undefined) fetch_body.authentication = authentication;\n            if (insertAtEnd !== undefined) fetch_body.insertAtEnd = insertAtEnd;\n\n            fetch(generateBareUrl('post', integrationID), {\n                method: \"POST\",\n                body: JSON.stringify(fetch_body),\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            })\n                .then(res => res.json())\n                .then(resData => {\n                    if ({}.hasOwnProperty.call(resData, 'ErrorCode')) console.error(resData.message);\n                    resolve(resData);\n                });\n        }\n        catch (err) { reject(err); }\n    });\n}\n\n\ninterface UpdateOptions {\n    /** EasyBase integration ID. Can be found by expanding the integration menu. This id is automatically generated.  */\n    integrationID: string;\n    /** Values to update records with. Format is { column_name: new value } */\n    updateValues: Record<string, unknown>;\n    /** Custom authentication string. Can be set in integration menu. If it is set, it is required to access integration. This acts as an extra layer of security and extensibility. */\n    authentication?: string;\n    /** This object can be set to overwrite the query values as set in the integration menu. If your query is setup to find records where 'age' >= 0, passing in { age: 50 } will query where 'age' >= 50. */\n    customQuery?: Record<string, unknown>;\n}\n\n/**\n * \n * @param {UpdateOptions} options UpdateOptions\n * @returns {Promise<String>} Update status.\n */\nexport function update(options: UpdateOptions): Promise<string> {\n    const defaultValues: UpdateOptions = {\n        integrationID: \"\",\n        updateValues: undefined,\n        authentication: undefined,\n        customQuery: undefined\n    }\n\n    const { integrationID, updateValues, authentication, customQuery } = { ...defaultValues, ...options };\n\n    if (isBadIntegrationID(integrationID)) throw new Error(\"integrationID is required and must be a string\");\n    if (isBadObject(updateValues) || updateValues === undefined) throw new Error(\"updateValues is required and must be a string\");\n    if (isBadString(authentication)) throw new Error(\"authentication must be a string or null\");\n    if (isBadObject(customQuery)) throw new Error(\"customQuery must be an object or null\");\n\n    return new Promise((resolve, reject) => {\n        try {\n            const fetch_body: any = { updateValues, ...customQuery };\n            if (authentication !== undefined) fetch_body.authentication = authentication;\n\n            fetch(generateBareUrl('update', integrationID), {\n                method: \"POST\",\n                body: JSON.stringify(fetch_body),\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            })\n                .then(res => res.json())\n                .then(resData => {\n                    if ({}.hasOwnProperty.call(resData, 'ErrorCode')) console.error(resData.message);\n                    resolve(resData.message);\n                });\n        }\n        catch (err) { reject(err); }\n    });\n}\n\ninterface DeleteOptions {\n    /** EasyBase integration ID. Can be found by expanding the integration menu. This id is automatically generated.  */\n    integrationID: string;\n    /** Custom authentication string. Can be set in integration menu. If it is set, it is required to access integration. This acts as an extra layer of security and extensibility. */\n    authentication?: string;\n    /** This object can be set to overwrite the query values as set in the integration menu. If your query is setup to find records where 'age' >= 0, passing in { age: 50 } will query where 'age' >= 50. */\n    customQuery?: Record<string, unknown>;\n}\n\n\n/**\n * \n * @param {DeleteOptions} options DeleteOptions\n * @return {Promise<String>} Delete status.\n */\nexport function Delete(options: DeleteOptions): Promise<string> {\n\n    const defaultValues: DeleteOptions = {\n        integrationID: \"\",\n        authentication: undefined,\n        customQuery: undefined\n    }\n\n    const { integrationID, authentication, customQuery } = { ...defaultValues, ...options };\n\n    if (isBadIntegrationID(integrationID)) throw new Error(\"integrationID is required and must be a string\");\n    if (isBadString(authentication)) throw new Error(\"authentication must be a string or null\");\n    if (isBadObject(customQuery)) throw new Error(\"customQuery must be an object or null\");\n\n    return new Promise((resolve, reject) => {\n        try {\n            const fetch_body: any = { ...customQuery };\n            if (authentication !== undefined) fetch_body.authentication = authentication;\n\n            fetch(generateBareUrl('delete', integrationID), {\n                method: \"POST\",\n                body: JSON.stringify(fetch_body),\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            })\n                .then(res => res.json())\n                .then(resData => {\n                    if ({}.hasOwnProperty.call(resData, 'ErrorCode')) console.error(resData.message);\n                    resolve(resData.message);\n                });\n        }\n        catch (err) { reject(err); }\n    });\n}\n\n/**\n * @async\n * Call a cloud function, created in Easybase interface.\n * @param {string} route Route as detailed in Easybase. Found under 'Deploy'. Will be in the form of ####...####-function-name.\n * @param {Record<string, any>} postBody Optional object to pass as the body of the POST request. This object will available in your cloud function's event.body.\n * @return {Promise<string>} Response from your cloud function. Detailed with a call to 'return context.succeed(\"RESPONSE\")'.\n */\nexport async function callFunction(route: string, postBody?: Record<string, any>): Promise<string> {\n\n    const res = await fetch(generateBareUrl('function', route.split(\"/\").pop()), {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(postBody) || \"\"\n    });\n\n    const rawDataText = await res.text();\n    return rawDataText;\n}"],"names":["POST_TYPES","DB_STATUS","EXECUTE_COUNT","GlobalNamespace","_g","gFactory","ebconfig","options","defaultParams","integrationID","integration","googleAnalyticsId","startsWith","console","error","analytics","Analytics","app","plugins","googleAnalytics","trackingId","debug","process","env","NODE_ENV","GA_AUTH_SALT","INSERT","UPDATE","DELETE","REVERSE","SHUFFLE","oMetaKey","Symbol","validObservableOptionKeys","async","validObserverOptionKeys","path","pathsOf","pathsFrom","processObserveOptions","result","undefined","Error","split","filter","n","invalidOptions","Object","keys","option","hasOwnProperty","length","join","observe","observer","oMeta","observers","some","o","opts","push","warn","unobserve","ol","al","arguments","i","splice","propertiesBluePrint","value","prepareObject","source","target","defineProperties","key","getObservedOf","prepareArray","l","Array","prepareTypedArray","filterChanges","changes","oPath","change","oPathsOf","type","oPathsFrom","callObserverSafe","listener","e","callObserversFromMT","batches","callObservers","currentObservable","relevantChanges","newPath","tmp","queueMicrotask","bind","rb","find","b","prototype","apply","tmpa","parent","ownKey","oldValue","object","item","isArray","ArrayOMeta","proxy","ArrayBuffer","isView","TypedArrayOMeta","Date","ObjectOMeta","proxiedPop","poppedIndex","popResult","pop","tmpObserved","detach","proxiedPush","pushContent","initialLength","pushResult","Reflect","proxiedShift","shiftResult","shift","proxiedUnshift","unshiftContent","unshiftResult","unshift","proxiedReverse","reverse","proxiedSort","comparator","sort","proxiedFill","filVal","start","end","tarLen","prev","slice","Math","max","min","fill","tmpTarget","proxiedCopyWithin","dest","len","copyWithin","nItem","oItem","proxiedSplice","splLen","spliceContent","startIndex","removed","inserted","spliceResult","newTarLen","index","proxiedTypedArraySet","offset","souLen","set","proxiedArrayMethods","proxiedTypedArrayMethods","OMetaBase","properties","cloningFunction","targetClone","revocable","Proxy","processOptions","assign","newValue","deleteProperty","get","Observable","from","isObservable","input","freeze","utilsFactory","globals","g","generateBareUrl","generateAuthBody","stamp","now","token","token_time","session","log","logging","authFactory","_clearTokens","refreshToken","newTokenCallback","userID","getUserAttributes","tokenPost","USER_ATTRIBUTES","attrsRes","track","data","setUserAttribute","SET_ATTRIBUTE","setAttrsRes","success","message","JSON","stringify","errorCode","forgotPassword","username","emailTemplate","FORGOT_PASSWORD_SEND","forgotPasswordConfirm","code","newPassword","FORGOT_PASSWORD_CONFIRM","signUp","newUserID","password","userAttributes","SIGN_UP","signUpRes","signIn","t1","floor","random","integrationType","toUpperCase","fetch","method","headers","HANDSHAKE","body","version","instance","res","json","resData","mounted","VALID_TOKEN","validTokenRes","elapsed","then","c","hash","Sha256","update","digest","hashOut","hexHash","map","call","x","toString","identify","ErrorCode","resetUserPassword","currentPassword","RESET_PASSWORD","signOut","initAuth","tt","postType","_auth","REQUEST_TOKEN","req_res","err","tokenPostAttachment","formData","customHeaders","regularAuthbody","attachmentAuth","UPLOAD_ATTACHMENT","tableFactory","tableTypes","tableName","COLUMN_TYPES","fullTableSize","TABLE_SIZE","Query","defaultOptions","queryName","fullOptions","GET_QUERY","dbFactory","_listenerIndex","_listeners","_runListeners","values","cb","dbEventListener","callback","currKey","allCallback","trx","userAssociatedRecordsOnly","count","PENDING","ALL","EASY_QB","SUCCESS","ERROR","oneCallback","ONE","db","easyqb","replace","EasybaseProvider","isIE","document","_isFrameInitialized","_frameConfiguration","limit","_observedChangeStack","_recordIdMap","WeakMap","_observableFrame","_","_frame","isSyncing","Frame","_recordIDExists","record","configureFrame","currentConfiguration","deleteRecord","_frameRecord","ele","deepEqual","SYNC_DELETE","_id","addRecord","defaultValues","insertAtEnd","newRecord","SYNC_INSERT","sync","GET_FRAME","_realignFrames","newData","isNewDataTheSame","newDataNoId","oldframe","currNewEle","allChanges","forEach","Number","SYNC_STACK","stack","updateRecordImage","_updateRecordAttachment","updateRecordVideo","updateRecordFile","isFileFromURI","f","uri","ext","attachment","name","toLowerCase","imageExtensions","includes","videoExtensions","FormData","append","columnName","callFunction","route","postBody","text","isBadInt","my_int","isBadString","my_string","isBadIntegrationID","isBadObject","my_obj","isBadBool","my_bool","authentication","customQuery","Promise","resolve","reject","fetch_body","post","updateValues","Delete"],"mappings":"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"}