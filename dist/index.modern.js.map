{"version":3,"file":"index.modern.js","sources":["../src/EasybaseProvider/types.ts","../src/EasybaseProvider/g.ts","../src/EasybaseProvider/object-observer.js","../src/EasybaseProvider/utils.ts","../src/EasybaseProvider/auth.ts","../src/EasybaseProvider/table.ts","../src/EasybaseProvider/db.ts","../src/EasybaseProvider/EasybaseProvider.ts","../src/index.ts"],"sourcesContent":["import { SQW } from \"easyqb/types/sq\";\nimport { NewExpression } from \"easyqb/types/expression\";\n\nexport interface ConfigureFrameOptions {\n    /** Edit starting index from which records will be retrieved from. Useful for paging. */\n    offset?: number;\n    /** Limit the amount of records to be retrieved. Set to -1 or null to return all records. Can be used in combination with offset. */\n    limit?: number | null;\n    /** Table to sync frame with. (Projects only) */\n    tableName?: string;\n}\n\nexport interface GoogleAnalyticsEvents {\n    login?: boolean;\n    sign_up?: boolean;\n    forgot_password?: boolean;\n    forgot_password_confirm?: boolean;\n    reset_user_password?: boolean;\n    get_user_attributes?: boolean;\n    set_user_attribute?: boolean;\n    query?: boolean;\n    full_table_size?: boolean;\n    table_types?: boolean;\n    db_one?: boolean;\n    db_all?: boolean;\n}\n\nexport interface EasybaseProviderPropsOptions {\n    /** Custom authentication string. Can be set in integration menu. If it is set, it is required to access integration. This acts as an extra layer of security and extensibility. */\n    authentication?: string;\n    /** Log Easybase react status and events to console. */\n    logging?: boolean;\n    /** Google Analytics 4 Measurement ID for activity reporting */\n    googleAnalyticsId?: string;\n    /** **Only Required for React Native** â€“ Google Analytics 4 Measurement Protocol Secret ID for activity reporting. To create a new secret, navigate in the Google Analytics UI to: Admin > Data Streams > choose your stream > Measurement Protocol > Create */\n    googleAnalyticsSecret?: string;\n    /**\n     * Specify which extra events are tracked in Google Analytics\n     * \n     * **default**:\n     *  * Page Mount\n     *  * login\n     *  * sign_up\n     *  * forgot_password\n     *  * forgot_password_confirm\n     *  * reset_user_password\n     *  \n    */\n    googleAnalyticsEventTracking?: GoogleAnalyticsEvents;\n}\n\n\nexport interface EasybaseProviderProps {\n    /** Easybase ebconfig object. Can be downloaded in the integration drawer next to 'React Token'. This is automatically generated.  */\n    ebconfig: Ebconfig;\n    /** Optional configuration parameters. */\n    options?: EasybaseProviderPropsOptions\n}\n\nexport interface FrameConfiguration {\n    /** Edit starting index from which records will be retrieved from. Useful for paging. */\n    offset: number;\n    /** Limit the amount of records to be retrieved. Set to -1 or null to return all records. Can be used in combination with offset. */\n    limit: number | null;\n    /** Table to sync frame with. (Projects only) */\n    tableName?: string;\n}\n\nexport interface Ebconfig {\n    tt?: string,\n    integration: string,\n    version: string\n}\n\nexport interface AddRecordOptions {\n    /** If true, record will be inserted at the end of the collection rather than the front. Overwrites absoluteIndex. */\n    insertAtEnd?: boolean;\n    /** Values to post to Easybase collection. Format is { column name: value } */\n    newRecord: Record<string, any>;\n    /** Table to post new record to. (Projects only) */\n    tableName?: string;\n}\n\nexport interface DeleteRecordOptions {\n    record: Record<string, any>;\n    /** Table to delete record from. (Projects only) */\n    tableName?: string;\n}\n\nexport interface QueryOptions {\n    /** Name of the query saved in Easybase's Visual Query Builder */\n    queryName: string;\n    /** If you would like to sort the order of your query by a column. Pass the name of that column here */\n    sortBy?: string;\n    /** By default, columnToSortBy will sort your query by ascending value (1, 2, 3...). To sort by descending set this to true */\n    descending?: boolean;\n    /** Edit starting index from which records will be retrieved from. Useful for paging. */\n    offset?: number;\n    /** Limit the amount of records to be retrieved. Can be used in combination with offset. */\n    limit?: number;\n    /** This object can be set to overwrite the query values as set in the integration menu. If your query is setup to find records where 'age' >= 0, passing in { age: 50 } will query where 'age' >= 50. Read more: https://easybase.io/about/2020/09/15/Customizing-query-values/ */\n    customQuery?: Record<string, any>;\n    /** Table to query. (Projects only) */\n    tableName?: string;\n}\n\nexport interface FileFromURI {\n    /** Path on local device to the attachment. Usually received from react-native-image-picker or react-native-document-picker */\n    uri: string,\n    /** Name of the file with proper extension */\n    name: string,\n    /** File MIME type */\n    type: string\n}\n\nexport interface UpdateRecordAttachmentOptions {\n    /** Easybase Record to attach this attachment to */\n    record: Record<string, any>;\n    /** The name of the column that is of type file/image/video */\n    columnName: string;\n    /** Either an HTML File element containing the correct type of attachment or a FileFromURI object for React Native instances.\n     * For React Native use libraries such as react-native-image-picker and react-native-document-picker.\n     * The file name must have a proper file extension corresponding to the attachment. \n     */\n    attachment: File | FileFromURI;\n    /** Table to post attachment to. (Projects only) */\n    tableName?: string;\n}\n\nexport interface StatusResponse {\n    /** Returns true if the operation was successful */\n    success: boolean;\n    /** Readable description of the the operation's status */\n    message: string;\n    /** Will represent a corresponding error if an error was thrown during the operation. */\n    errorCode?: string;\n}\n\nexport interface EmailTemplate {\n    /** Optional header of email that will be sent to user with verification code */\n    greeting?: string;\n    /** Optional name of application for placement within email */\n    appName?: string;\n    /** Optional footer of verification email often used for disclaimers. Can be a valid HTML string */\n    footer?: string;\n}\n\nexport enum POST_TYPES {\n    UPLOAD_ATTACHMENT = \"upload_attachment\",\n    HANDSHAKE = \"handshake\",\n    VALID_TOKEN = \"valid_token\",\n    GET_FRAME = \"get_frame\",\n    TABLE_SIZE = \"table_size\",\n    COLUMN_TYPES = \"column_types\",\n    SYNC_STACK = \"sync_stack\",\n    SYNC_DELETE = \"sync_delete\",\n    SYNC_INSERT = \"sync_insert\",\n    GET_QUERY = \"get_query\",\n    USER_ATTRIBUTES = \"user_attributes\",\n    SET_ATTRIBUTE = \"set_attribute\",\n    SIGN_UP = \"sign_up\",\n    REQUEST_TOKEN = \"request_token\",\n    EASY_QB = \"easyqb\",\n    RESET_PASSWORD = \"reset_password\",\n    FORGOT_PASSWORD_SEND = \"forgot_password_send\",\n    FORGOT_PASSWORD_CONFIRM = \"forgot_password_confirm\"\n}\n\nexport enum DB_STATUS {\n    ERROR = \"error\",\n    PENDING = \"pending\",\n    SUCCESS = \"success\"\n}\n\nexport enum EXECUTE_COUNT {\n    ALL = \"all\",\n    ONE = \"one\"\n}\n\nexport interface AuthPostResponse {\n    success: boolean;\n    data: any;\n}\n\nexport interface ContextValue {\n    /**\n     * Signs out the current user.\n     */\n    signOut(): void;\n    /**\n     * Retrieve the currently signed in users attribute object.\n     * @async\n     * @return {Promise<Record<string, string>>} Promise<Record<string, string>>\n     */\n    getUserAttributes(): Promise<Record<string, string>>;\n    /**\n     * Set a single attribute of the currently signed in user. Can also be updated visually in the Easybase 'Users' tab.\n     * @async\n     * @param key Object key. Can be a new key or existing key.\n     * @param value attribute value.\n     * @return {Promise<StatusResponse>} Promise<StatusResponse>\n     */\n    setUserAttribute(key: string, value: string): Promise<StatusResponse>;\n    /**\n     * Reset the currently signed-in user's password to a new string.\n     * @async\n     * @param {string} currentPassword Signed-in user's current password\n     * @param {string} newPassword New password for user's account\n     * @return {Promise<StatusResponse>} Promise<StatusResponse>\n     */\n    resetUserPassword(currentPassword: string, newPassword: string): Promise<StatusResponse>;\n    /**\n     * Sign in a user that already exists for a project.\n     * @async\n     * @param userID unique identifier for new user. Usually an email or phone number.\n     * @param password user password.\n     * @return {Promise<StatusResponse>} Promise<StatusResponse>\n     */\n    signIn(userID: string, password: string): Promise<StatusResponse>;\n    /**\n     * Create a new user for your project. You must still call signIn() after signing up.\n     * @async\n     * @param newUserID unique identifier for new user. Usually an email or phone number.\n     * @param password user password. Must be at least 8 characters long.\n     * @param userAttributes Optional object to store user attributes. Can also be edited visually in the Easybase 'Users' tab.\n     * @return {Promise<StatusResponse>} Promise<StatusResponse>\n     */\n    signUp(newUserID: string, password: string, userAttributes?: Record<string, string>): Promise<StatusResponse>;\n    /**\n     * **DEPRECATED**: Use `db` instead - https://easybase.github.io/EasyQB/\n     * @deprecated Use `db` instead - https://easybase.github.io/EasyQB/\n     * @param {ConfigureFrameOptions} options ConfigureFrameOptions\n     * @return {StatusResponse} StatusResponse\n     */\n    configureFrame(options: ConfigureFrameOptions): StatusResponse;\n    /**\n     * **DEPRECATED**: Use `db().insert()` instead - https://easybase.github.io/EasyQB/docs/insert_queries.html\n     * @deprecated Use `db().insert()` instead - https://easybase.github.io/EasyQB/docs/insert_queries.html\n     * @async\n     * @param {AddRecordOptions} options AddRecordOptions\n     * @return {Promise<StatusResponse>} Promise<StatusResponse>\n     */\n    addRecord(options: AddRecordOptions): Promise<StatusResponse>;\n    /**\n     * **DEPRECATED**: Use `db().delete()` instead - https://easybase.github.io/EasyQB/docs/delete_queries.html\n     * @deprecated Use `db().delete()` instead - https://easybase.github.io/EasyQB/docs/delete_queries.html\n     * @async\n     * @param {Record<string, any>} record \n     * @return {Promise<StatusResponse>} Promise<StatusResponse>\n     */\n    deleteRecord(options: DeleteRecordOptions): Promise<StatusResponse>;\n    /**\n     * **DEPRECATED**: Use `db` instead - https://easybase.github.io/EasyQB/\n     * @deprecated Use `db` instead - https://easybase.github.io/EasyQB/\n     * @async\n     * @return {Promise<StatusResponse>} Promise<StatusResponse>\n     */\n    sync(): Promise<StatusResponse>;\n    /**\n     * **DEPRECATED**: Use the `setImage` function instead.\n     * @deprecated Use the `setImage` function instead.\n     * @async\n     * @param {UpdateRecordAttachmentOptions} options UpdateRecordAttachmentOptions\n     * @return {Promise<StatusResponse>} Promise<StatusResponse>\n     */\n    updateRecordImage(options: UpdateRecordAttachmentOptions): Promise<StatusResponse>;\n    /**\n     * **DEPRECATED**: Use the `setVideo` function instead.\n     * @deprecated Use the `setVideo` function instead.\n     * @async\n     * @param {UpdateRecordAttachmentOptions} options UpdateRecordAttachmentOptions\n     * @return {Promise<StatusResponse>} Promise<StatusResponse>\n     */\n    updateRecordVideo(options: UpdateRecordAttachmentOptions): Promise<StatusResponse>;\n    /**\n     * **DEPRECATED**: Use the `setFile` function instead.\n     * @deprecated Use the `setFile` function instead.\n     * @async\n     * @param {UpdateRecordAttachmentOptions} options UpdateRecordAttachmentOptions\n     * @return {Promise<StatusResponse>} Promise<StatusResponse>\n     */\n    updateRecordFile(options: UpdateRecordAttachmentOptions): Promise<StatusResponse>;\n    /**\n     * Upload an image to your backend and attach it to a specific record. columnName must reference a column of type 'image'.\n     * The file must have a valid image extension (png, jpg, heic, etc). \n     * @async\n     * @param {string} recordKey The '_key' of the record to attach this image to. Can be retrieved like: `db().return(\"_key\").where({ title: \"The Lion King\" }).one()`\n     * @param {string} columnName The name of the column that is of type image to attach.\n     * @param {File | FileFromURI} image Either an HTML File element or a FileFromURI object for React Native instances. For React Native, use libraries such as react-native-image-picker and react-native-document-picker. The file name must have a valid image file extension.\n     * @param {string} [tableName] Table to post attachment to. (Projects only)\n     * @return {Promise<StatusResponse>} Promise<StatusResponse>\n     */\n    setImage(recordKey: string, columnName: string, image: File | FileFromURI, tableName?: string): Promise<StatusResponse>;\n    /**\n     * Upload a video to your backend and attach it to a specific record. columnName must reference a column of type 'video'.\n     * The file must have a valid video extension (webm, mp4, mov, etc). \n     * @async\n     * @param {string} recordKey The '_key' of the record to attach this image to. Can be retrieved like: `db().return(\"_key\").where({ title: \"The Lion King\" }).one()`\n     * @param {string} columnName The name of the column that is of type video to attach.\n     * @param {File | FileFromURI} video Either an HTML File element or a FileFromURI object for React Native instances. For React Native, use libraries such as react-native-image-picker and react-native-document-picker. The file name must have a valid video file extension.\n     * @param {string} [tableName] Table to post attachment to. (Projects only)\n     * @return {Promise<StatusResponse>} Promise<StatusResponse>\n     */\n    setVideo(recordKey: string, columnName: string, video: File | FileFromURI, tableName?: string): Promise<StatusResponse>;\n    /**\n     * Upload a file to your backend and attach it to a specific record. columnName must reference a column of type 'file'.\n     * @async\n     * @param {string} recordKey The '_key' of the record to attach this image to. Can be retrieved like: `db().return(\"_key\").where({ title: \"The Lion King\" }).one()`\n     * @param {string} columnName The name of the column that is of type file to attach.\n     * @param {File | FileFromURI} file Either an HTML File element or a FileFromURI object for React Native instances. For React Native, use libraries such as react-native-image-picker and react-native-document-picker.\n     * @param {string} [tableName] Table to post attachment to. (Projects only)\n     * @return {Promise<StatusResponse>} Promise<StatusResponse>\n     */\n    setFile(recordKey: string, columnName: string, file: File | FileFromURI, tableName?: string): Promise<StatusResponse>;\n    /**\n     * **DEPRECATED**: Use `db` instead - https://easybase.github.io/EasyQB/\n     * @deprecated Use `db` instead - https://easybase.github.io/EasyQB/\n     * @return {Record<string, any>[]} Array of records corresponding to the current frame. Call sync() to push changes that you have made to this array.\n     */\n    Frame(): Record<string, any>[];\n    /**\n     * **DEPRECATED**: Use `db` instead - https://easybase.github.io/EasyQB/\n     * @deprecated Use `db` instead - https://easybase.github.io/EasyQB/\n     * @param {number} [index] Passing an index will only return the object at that index in your Frame, rather than the entire array. This is useful for editing single objects based on an index.\n     * @return {Record<string, any>} Single record corresponding to that object within the current frame. Call sync() to push changes that you have made to this object.\n     */\n    Frame(index: number): Record<string, any>;\n    /**\n     * Gets the number of records in your table.\n     * @async\n     * @returns {Promise<number>} The the number of records in your table.\n     */\n    fullTableSize(): Promise<number>;\n    /**\n     * Gets the number of records in your table.\n     * @async\n     * @param {string} [tableName] Name of table to get the sizes of. (Projects only)\n     * @returns {Promise<number>} The the number of records in your table.\n     */\n    fullTableSize(tableName: string): Promise<number>;\n    /**\n     * Retrieve an object detailing the columns in your table mapped to their corresponding type.\n     * @async\n     * @returns {Promise<Record<string, any>>} Object detailing the columns in your table mapped to their corresponding type.\n     */\n    tableTypes(): Promise<Record<string, any>>;\n    /**\n     * Retrieve an object detailing the columns in your table mapped to their corresponding type.\n     * @async\n     * @param {string} [tableName] Name of table to get the types of. (Projects only)\n     * @returns {Promise<Record<string, any>>} Object detailing the columns in your table mapped to their corresponding type.\n     */\n    tableTypes(tableName: string): Promise<Record<string, any>>;\n    /**\n     * View your frames current configuration\n     * @returns {Record<string, any>} Object contains the `offset` and `length` of your current frame.\n     */\n    currentConfiguration(): FrameConfiguration;\n    /**\n     * @async\n     * View a query by name. This returns an isolated array that has no effect on your frame or frame configuration. sync() and Frame() have no \n     * relationship with a Query(). An edited Query cannot be synced with your database, use Frame() for realtime \n     * database array features.\n     * @param {QueryOptions} options QueryOptions\n     * @return {Promise<Record<string, any>[]>} Isolated array of records in the same form as Frame(). Editing this array has no effect and cannot be synced with your database. Use Frame() for realtime database features.\n     */\n    Query(options: QueryOptions): Promise<Record<string, any>[]>;\n    /**\n     * Instantiate EasyQB instance for dynamic CRUD query building: https://easybase.github.io/EasyQB/\n     * @param {string} [tableName] Name of your table.\n     * @param {boolean} [userAssociatedRecordsOnly] **PROJECTS ONLY** Operations will only be performed on records already associated to the currently signed-in user. Inserted records will automatically be associate to the user.\n     * @returns {SQW} EasyQB object for dynamic querying: https://easybase.github.io/EasyQB/\n     */\n    db(tableName?: string, userAssociatedRecordsOnly?: boolean): SQW;\n    /**\n     * Subscribe to db events, invoked by calling `.all` or `.one`: https://easybase.github.io/EasyQB/\n     * @param {function(status?: DB_STATUS, queryType?: string, executeCount?: EXECUTE_COUNT, tableName?: string | null, returned?: any):void} [callback] Callback function to execute on db operations.\n     * @returns {function():void} Calling this function unsubscribes your callback function from events.\n     */\n    dbEventListener(callback: (status?: DB_STATUS, queryType?: string, executeCount?: EXECUTE_COUNT, tableName?: string | null, returned?: any) => void): () => void;\n    /**\n     * Expressions and operations builder for `.db()`, used to create complex conditions, aggregators, and clauses. https://easybase.github.io/EasyQB/docs/operations.html\n     */\n    e: NewExpression;\n    /**\n     * @async\n     * Trigger an email to the given username with a verification code to reset the user's password. This verification \n     * code is used in the `forgotPasswordConfirm` function, along with a new password. **The username must be the user's email address**.\n     * @param {string} username A username which must also be a valid email address\n     * @param {EmailTemplate} emailTemplate Optional details for the formatting & content of the verification email\n     * @return {Promise<StatusResponse>} A StatusResponse corresponding to the successful sending of a verification code email\n     */\n    forgotPassword(username: string, emailTemplate?: EmailTemplate): Promise<StatusResponse>\n    /**\n     * @async\n     * Confirm the resetting of an unauthenticated users password. This function is invoked after `forgotPassword` is used to trigger\n     * an email containing a verification code to the given username [*which must also be an email*]. The user's randomly generated\n     * verification code from their email is passed in the first parameter. \n     * @param {string} code Verification code found in the email sent from the `forgotPassword` function\n     * @param {string} username The same username (email) used in the `forgotPassword` function\n     * @param {string} newPassword The new password for the corresponding verified user\n     * @return {Promise<StatusResponse>} A StatusResponse corresponding to the successful setting of a new password\n     */\n    forgotPasswordConfirm(code: string, username: string, newPassword: string): Promise<StatusResponse>\n    /**\n     * Retrieve the currently signed-in user's ID.\n     * @return {string | undefined} The currently signed-in user's ID (username), otherwise undefined.\n     */\n    userID(): string | undefined;\n}\n\nexport interface Globals {\n    ebconfig: Ebconfig;\n    token: string;\n    refreshToken: string;\n    session: number;\n    options: EasybaseProviderPropsOptions;\n    instance: \"Node\" | \"React\" | \"React Native\";\n    mounted: boolean;\n    newTokenCallback(): void;\n    userID: string | undefined;\n    analyticsEnabled: boolean;\n    analyticsEventsToTrack: GoogleAnalyticsEvents;\n    analyticsEvent(eventTitle: string, params?: Record<string, any>): void;\n    analyticsIdentify(hashedUserId: string): void;\n    GA_USER_ID_SALT: string; // https://support.google.com/analytics/answer/6366371?hl=en#hashed\n}\n","import { Ebconfig, EasybaseProviderPropsOptions, Globals, EasybaseProviderProps, GoogleAnalyticsEvents } from \"./types\";\n\nnamespace GlobalNamespace {\n    export let ebconfig: Ebconfig;\n    export let token: string;\n    export let refreshToken: string;\n    export let session: number;\n    export let options: EasybaseProviderPropsOptions;\n    export let instance: \"Node\" | \"React\" | \"React Native\";\n    export let mounted: boolean;\n    export let newTokenCallback: () => {};\n    export let userID: string;\n    export let analyticsEnabled: boolean;\n    export let analyticsEventsToTrack: GoogleAnalyticsEvents;\n    export let analyticsEvent: () => {};\n    export let analyticsIdentify: () => {};\n    export let GA_USER_ID_SALT: string; // https://support.google.com/analytics/answer/6366371?hl=en#hashed\n}\n\nconst _g: Globals = { ...GlobalNamespace };\n\nexport default _g;\n\nexport function gFactory({ ebconfig, options }: EasybaseProviderProps): Globals {\n    const optionsObj = { ...options }; // Forces undefined to empty object\n    const gaTrackingObj = options ? options.googleAnalyticsEventTracking : {};\n    const defaultG = {\n        options: optionsObj,\n        ebconfig: ebconfig,\n        GA_USER_ID_SALT: \"m83WnAPrq\",\n        analyticsEventsToTrack: {\n            login: true,\n            sign_up: true,\n            forgot_password: true,\n            forgot_password_confirm: true,\n            reset_user_password: true,\n            ...gaTrackingObj\n        }\n    }\n    return { ...GlobalNamespace, ...defaultG } as Globals;\n}\n","const\n\tINSERT = 'insert',\n\tUPDATE = 'update',\n\tDELETE = 'delete',\n\tREVERSE = 'reverse',\n\tSHUFFLE = 'shuffle',\n\toMetaKey = Symbol('observable-meta-key'),\n\tvalidObservableOptionKeys = { async: 1 },\n\tvalidObserverOptionKeys = { path: 1, pathsOf: 1, pathsFrom: 1 },\n\tprocessObserveOptions = function processObserveOptions(options) {\n\t\tconst result = {};\n\t\tif (options.path !== undefined) {\n\t\t\tif (typeof options.path !== 'string' || options.path === '') {\n\t\t\t\tthrow new Error('\"path\" option, if/when provided, MUST be a non-empty string');\n\t\t\t}\n\t\t\tresult.path = options.path;\n\t\t}\n\t\tif (options.pathsOf !== undefined) {\n\t\t\tif (options.path) {\n\t\t\t\tthrow new Error('\"pathsOf\" option MAY NOT be specified together with \"path\" option');\n\t\t\t}\n\t\t\tif (typeof options.pathsOf !== 'string') {\n\t\t\t\tthrow new Error('\"pathsOf\" option, if/when provided, MUST be a string (MAY be empty)');\n\t\t\t}\n\t\t\tresult.pathsOf = options.pathsOf.split('.').filter(n => n);\n\t\t}\n\t\tif (options.pathsFrom !== undefined) {\n\t\t\tif (options.path || options.pathsOf) {\n\t\t\t\tthrow new Error('\"pathsFrom\" option MAY NOT be specified together with \"path\"/\"pathsOf\"  option/s');\n\t\t\t}\n\t\t\tif (typeof options.pathsFrom !== 'string' || options.pathsFrom === '') {\n\t\t\t\tthrow new Error('\"pathsFrom\" option, if/when provided, MUST be a non-empty string');\n\t\t\t}\n\t\t\tresult.pathsFrom = options.pathsFrom;\n\t\t}\n\t\tconst invalidOptions = Object.keys(options).filter(option => !validObserverOptionKeys.hasOwnProperty(option));\n\t\tif (invalidOptions.length) {\n\t\t\tthrow new Error(`'${invalidOptions.join(', ')}' is/are not a valid observer option/s`);\n\t\t}\n\t\treturn result;\n\t},\n\tobserve = function observe(observer, options) {\n\t\tif (typeof observer !== 'function') {\n\t\t\tthrow new Error(`observer MUST be a function, got '${observer}'`);\n\t\t}\n\n\t\tconst\n\t\t\toMeta = this[oMetaKey],\n\t\t\tobservers = oMeta.observers;\n\t\tif (!observers.some(o => o[0] === observer)) {\n\t\t\tlet opts;\n\t\t\tif (options) {\n\t\t\t\topts = processObserveOptions(options);\n\t\t\t} else {\n\t\t\t\topts = {};\n\t\t\t}\n\t\t\tobservers.push([observer, opts]);\n\t\t} else {\n\t\t\tconsole.warn('observer may be bound to an observable only once; will NOT rebind');\n\t\t}\n\t},\n\tunobserve = function unobserve() {\n\t\tconst oMeta = this[oMetaKey];\n\t\tconst observers = oMeta.observers;\n\t\tlet ol = observers.length;\n\t\tif (ol) {\n\t\t\tlet al = arguments.length;\n\t\t\tif (al) {\n\t\t\t\twhile (al--) {\n\t\t\t\t\tlet i = ol;\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\tif (observers[i][0] === arguments[al]) {\n\t\t\t\t\t\t\tobservers.splice(i, 1);\n\t\t\t\t\t\t\tol--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tobservers.splice(0);\n\t\t\t}\n\t\t}\n\t},\n\tpropertiesBluePrint = { [oMetaKey]: { value: null }, observe: { value: observe }, unobserve: { value: unobserve } },\n\tprepareObject = function prepareObject(source, oMeta) {\n\t\tpropertiesBluePrint[oMetaKey].value = oMeta;\n\t\tconst target = Object.defineProperties({}, propertiesBluePrint);\n\t\tfor (const key of Object.keys(source)) {\n\t\t\ttarget[key] = getObservedOf(source[key], key, oMeta);\n\t\t}\n\t\treturn target;\n\t},\n\tprepareArray = function prepareArray(source, oMeta) {\n\t\tlet i = 0, l = source.length;\n\t\tpropertiesBluePrint[oMetaKey].value = oMeta;\n\t\tconst target = Object.defineProperties(new Array(l), propertiesBluePrint);\n\t\tfor (; i < l; i++) {\n\t\t\ttarget[i] = getObservedOf(source[i], i, oMeta);\n\t\t}\n\t\treturn target;\n\t},\n\tprepareTypedArray = function prepareTypedArray(source, oMeta) {\n\t\tpropertiesBluePrint[oMetaKey].value = oMeta;\n\t\tObject.defineProperties(source, propertiesBluePrint);\n\t\treturn source;\n\t},\n\tfilterChanges = function filterChanges(options, changes) {\n\t\tlet result = changes;\n\t\tif (options.path) {\n\t\t\tconst oPath = options.path;\n\t\t\tresult = changes.filter(change =>\n\t\t\t\tchange.path.join('.') === oPath\n\t\t\t);\n\t\t} else if (options.pathsOf) {\n\t\t\tconst oPathsOf = options.pathsOf;\n\t\t\tresult = changes.filter(change =>\n\t\t\t\tchange.path.length === oPathsOf.length + 1 ||\n\t\t\t\t(change.path.length === oPathsOf.length && (change.type === REVERSE || change.type === SHUFFLE))\n\t\t\t);\n\t\t} else if (options.pathsFrom) {\n\t\t\tconst oPathsFrom = options.pathsFrom;\n\t\t\tresult = changes.filter(change =>\n\t\t\t\tchange.path.join('.').startsWith(oPathsFrom)\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t},\n\tcallObserverSafe = function callObserverSafe(listener, changes) {\n\t\ttry {\n\t\t\tlistener(changes);\n\t\t} catch (e) {\n\t\t\tconsole.error(`failed to notify listener ${listener} with ${changes}`, e);\n\t\t}\n\t},\n\tcallObserversFromMT = function callObserversFromMT() {\n\t\tconst batches = this.batches;\n\t\tthis.batches = null;\n\t\tfor (const [listener, options] of batches) {\n\t\t\tcallObserverSafe(listener, options);\n\t\t}\n\t},\n\tcallObservers = function callObservers(oMeta, changes) {\n\t\tlet currentObservable = oMeta;\n\t\tlet observers, target, options, relevantChanges, i, newPath, tmp;\n\t\tconst l = changes.length;\n\t\tdo {\n\t\t\tobservers = currentObservable.observers;\n\t\t\ti = observers.length;\n\t\t\twhile (i--) {\n\t\t\t\t[target, options] = observers[i];\n\t\t\t\trelevantChanges = filterChanges(options, changes);\n\n\t\t\t\tif (relevantChanges.length) {\n\t\t\t\t\tif (currentObservable.options.async) {\n\t\t\t\t\t\t//\tthis is the async dispatch handling\n\t\t\t\t\t\tif (!currentObservable.batches) {\n\t\t\t\t\t\t\tcurrentObservable.batches = [];\n\t\t\t\t\t\t\tqueueMicrotask(callObserversFromMT.bind(currentObservable));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet rb = currentObservable.batches.find(b => b[0] === target);\n\t\t\t\t\t\tif (!rb) {\n\t\t\t\t\t\t\trb = [target, []];\n\t\t\t\t\t\t\tcurrentObservable.batches.push(rb);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tArray.prototype.push.apply(rb[1], relevantChanges);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//\tthis is the naive straight forward synchronous dispatch\n\t\t\t\t\t\tcallObserverSafe(target, relevantChanges);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet tmpa;\n\t\t\tif (currentObservable.parent) {\n\t\t\t\ttmpa = new Array(l);\n\t\t\t\tfor (let i = 0; i < l; i++) {\n\t\t\t\t\ttmp = changes[i];\n\t\t\t\t\tnewPath = [currentObservable.ownKey, ...tmp.path];\n\t\t\t\t\ttmpa[i] = {\n\t\t\t\t\t\ttype: tmp.type,\n\t\t\t\t\t\tpath: newPath,\n\t\t\t\t\t\tvalue: tmp.value,\n\t\t\t\t\t\toldValue: tmp.oldValue,\n\t\t\t\t\t\tobject: tmp.object\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tchanges = tmpa;\n\t\t\t\tcurrentObservable = currentObservable.parent;\n\t\t\t} else {\n\t\t\t\tcurrentObservable = null;\n\t\t\t}\n\t\t} while (currentObservable);\n\t},\n\tgetObservedOf = function getObservedOf(item, key, parent) {\n\t\tif (!item || typeof item !== 'object') {\n\t\t\treturn item;\n\t\t} else if (Array.isArray(item)) {\n\t\t\treturn new ArrayOMeta({ target: item, ownKey: key, parent: parent }).proxy;\n\t\t} else if (ArrayBuffer.isView(item)) {\n\t\t\treturn new TypedArrayOMeta({ target: item, ownKey: key, parent: parent }).proxy;\n\t\t} else if (item instanceof Date || item instanceof Error) {\n\t\t\treturn item;\n\t\t} else {\n\t\t\treturn new ObjectOMeta({ target: item, ownKey: key, parent: parent }).proxy;\n\t\t}\n\t},\n\tproxiedPop = function proxiedPop() {\n\t\tconst oMeta = this[oMetaKey],\n\t\t\ttarget = oMeta.target,\n\t\t\tpoppedIndex = target.length - 1;\n\n\t\tlet popResult = target.pop();\n\t\tif (popResult && typeof popResult === 'object') {\n\t\t\tconst tmpObserved = popResult[oMetaKey];\n\t\t\tif (tmpObserved) {\n\t\t\t\tpopResult = tmpObserved.detach();\n\t\t\t}\n\t\t}\n\n\t\tconst changes = [{ type: DELETE, path: [poppedIndex], oldValue: popResult, object: this }];\n\t\tcallObservers(oMeta, changes);\n\n\t\treturn popResult;\n\t},\n\tproxiedPush = function proxiedPush() {\n\t\tconst\n\t\t\toMeta = this[oMetaKey],\n\t\t\ttarget = oMeta.target,\n\t\t\tl = arguments.length,\n\t\t\tpushContent = new Array(l),\n\t\t\tinitialLength = target.length;\n\n\t\tfor (let i = 0; i < l; i++) {\n\t\t\tpushContent[i] = getObservedOf(arguments[i], initialLength + i, oMeta);\n\t\t}\n\t\tconst pushResult = Reflect.apply(target.push, target, pushContent);\n\n\t\tconst changes = [];\n\t\tfor (let i = initialLength, l = target.length; i < l; i++) {\n\t\t\tchanges[i - initialLength] = { type: INSERT, path: [i], value: target[i], object: this };\n\t\t}\n\t\tcallObservers(oMeta, changes);\n\n\t\treturn pushResult;\n\t},\n\tproxiedShift = function proxiedShift() {\n\t\tconst\n\t\t\toMeta = this[oMetaKey],\n\t\t\ttarget = oMeta.target;\n\t\tlet shiftResult, i, l, item, tmpObserved;\n\n\t\tshiftResult = target.shift();\n\t\tif (shiftResult && typeof shiftResult === 'object') {\n\t\t\ttmpObserved = shiftResult[oMetaKey];\n\t\t\tif (tmpObserved) {\n\t\t\t\tshiftResult = tmpObserved.detach();\n\t\t\t}\n\t\t}\n\n\t\t//\tupdate indices of the remaining items\n\t\tfor (i = 0, l = target.length; i < l; i++) {\n\t\t\titem = target[i];\n\t\t\tif (item && typeof item === 'object') {\n\t\t\t\ttmpObserved = item[oMetaKey];\n\t\t\t\tif (tmpObserved) {\n\t\t\t\t\ttmpObserved.ownKey = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst changes = [{ type: DELETE, path: [0], oldValue: shiftResult, object: this }];\n\t\tcallObservers(oMeta, changes);\n\n\t\treturn shiftResult;\n\t},\n\tproxiedUnshift = function proxiedUnshift() {\n\t\tconst\n\t\t\toMeta = this[oMetaKey],\n\t\t\ttarget = oMeta.target,\n\t\t\tal = arguments.length,\n\t\t\tunshiftContent = new Array(al);\n\n\t\tfor (let i = 0; i < al; i++) {\n\t\t\tunshiftContent[i] = getObservedOf(arguments[i], i, oMeta);\n\t\t}\n\t\tconst unshiftResult = Reflect.apply(target.unshift, target, unshiftContent);\n\n\t\tfor (let i = 0, l = target.length, item; i < l; i++) {\n\t\t\titem = target[i];\n\t\t\tif (item && typeof item === 'object') {\n\t\t\t\tconst tmpObserved = item[oMetaKey];\n\t\t\t\tif (tmpObserved) {\n\t\t\t\t\ttmpObserved.ownKey = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//\tpublish changes\n\t\tconst l = unshiftContent.length;\n\t\tconst changes = new Array(l);\n\t\tfor (let i = 0; i < l; i++) {\n\t\t\tchanges[i] = { type: INSERT, path: [i], value: target[i], object: this };\n\t\t}\n\t\tcallObservers(oMeta, changes);\n\n\t\treturn unshiftResult;\n\t},\n\tproxiedReverse = function proxiedReverse() {\n\t\tconst\n\t\t\toMeta = this[oMetaKey],\n\t\t\ttarget = oMeta.target;\n\t\tlet i, l, item;\n\n\t\ttarget.reverse();\n\t\tfor (i = 0, l = target.length; i < l; i++) {\n\t\t\titem = target[i];\n\t\t\tif (item && typeof item === 'object') {\n\t\t\t\tconst tmpObserved = item[oMetaKey];\n\t\t\t\tif (tmpObserved) {\n\t\t\t\t\ttmpObserved.ownKey = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst changes = [{ type: REVERSE, path: [], object: this }];\n\t\tcallObservers(oMeta, changes);\n\n\t\treturn this;\n\t},\n\tproxiedSort = function proxiedSort(comparator) {\n\t\tconst\n\t\t\toMeta = this[oMetaKey],\n\t\t\ttarget = oMeta.target;\n\t\tlet i, l, item;\n\n\t\ttarget.sort(comparator);\n\t\tfor (i = 0, l = target.length; i < l; i++) {\n\t\t\titem = target[i];\n\t\t\tif (item && typeof item === 'object') {\n\t\t\t\tconst tmpObserved = item[oMetaKey];\n\t\t\t\tif (tmpObserved) {\n\t\t\t\t\ttmpObserved.ownKey = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst changes = [{ type: SHUFFLE, path: [], object: this }];\n\t\tcallObservers(oMeta, changes);\n\n\t\treturn this;\n\t},\n\tproxiedFill = function proxiedFill(filVal, start, end) {\n\t\tconst\n\t\t\toMeta = this[oMetaKey],\n\t\t\ttarget = oMeta.target,\n\t\t\tchanges = [],\n\t\t\ttarLen = target.length,\n\t\t\tprev = target.slice(0);\n\t\tstart = start === undefined ? 0 : (start < 0 ? Math.max(tarLen + start, 0) : Math.min(start, tarLen));\n\t\tend = end === undefined ? tarLen : (end < 0 ? Math.max(tarLen + end, 0) : Math.min(end, tarLen));\n\n\t\tif (start < tarLen && end > start) {\n\t\t\ttarget.fill(filVal, start, end);\n\n\t\t\tlet tmpObserved;\n\t\t\tfor (let i = start, item, tmpTarget; i < end; i++) {\n\t\t\t\titem = target[i];\n\t\t\t\ttarget[i] = getObservedOf(item, i, oMeta);\n\t\t\t\tif (prev.hasOwnProperty(i)) {\n\t\t\t\t\ttmpTarget = prev[i];\n\t\t\t\t\tif (tmpTarget && typeof tmpTarget === 'object') {\n\t\t\t\t\t\ttmpObserved = tmpTarget[oMetaKey];\n\t\t\t\t\t\tif (tmpObserved) {\n\t\t\t\t\t\t\ttmpTarget = tmpObserved.detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tchanges.push({ type: UPDATE, path: [i], value: target[i], oldValue: tmpTarget, object: this });\n\t\t\t\t} else {\n\t\t\t\t\tchanges.push({ type: INSERT, path: [i], value: target[i], object: this });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcallObservers(oMeta, changes);\n\t\t}\n\n\t\treturn this;\n\t},\n\tproxiedCopyWithin = function proxiedCopyWithin(dest, start, end) {\n\t\tconst\n\t\t\toMeta = this[oMetaKey],\n\t\t\ttarget = oMeta.target,\n\t\t\ttarLen = target.length;\n\t\tdest = dest < 0 ? Math.max(tarLen + dest, 0) : dest;\n\t\tstart = start === undefined ? 0 : (start < 0 ? Math.max(tarLen + start, 0) : Math.min(start, tarLen));\n\t\tend = end === undefined ? tarLen : (end < 0 ? Math.max(tarLen + end, 0) : Math.min(end, tarLen));\n\t\tconst len = Math.min(end - start, tarLen - dest);\n\n\t\tif (dest < tarLen && dest !== start && len > 0) {\n\t\t\tconst\n\t\t\t\tprev = target.slice(0),\n\t\t\t\tchanges = [];\n\n\t\t\ttarget.copyWithin(dest, start, end);\n\n\t\t\tfor (let i = dest, nItem, oItem, tmpObserved; i < dest + len; i++) {\n\t\t\t\t//\tupdate newly placed observables, if any\n\t\t\t\tnItem = target[i];\n\t\t\t\tif (nItem && typeof nItem === 'object') {\n\t\t\t\t\tnItem = getObservedOf(nItem, i, oMeta);\n\t\t\t\t\ttarget[i] = nItem;\n\t\t\t\t}\n\n\t\t\t\t//\tdetach overridden observables, if any\n\t\t\t\toItem = prev[i];\n\t\t\t\tif (oItem && typeof oItem === 'object') {\n\t\t\t\t\ttmpObserved = oItem[oMetaKey];\n\t\t\t\t\tif (tmpObserved) {\n\t\t\t\t\t\toItem = tmpObserved.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (typeof nItem !== 'object' && nItem === oItem) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tchanges.push({ type: UPDATE, path: [i], value: nItem, oldValue: oItem, object: this });\n\t\t\t}\n\n\t\t\tcallObservers(oMeta, changes);\n\t\t}\n\n\t\treturn this;\n\t},\n\tproxiedSplice = function proxiedSplice() {\n\t\tconst\n\t\t\toMeta = this[oMetaKey],\n\t\t\ttarget = oMeta.target,\n\t\t\tsplLen = arguments.length,\n\t\t\tspliceContent = new Array(splLen),\n\t\t\ttarLen = target.length;\n\n\t\t//\tobservify the newcomers\n\t\tfor (let i = 0; i < splLen; i++) {\n\t\t\tspliceContent[i] = getObservedOf(arguments[i], i, oMeta);\n\t\t}\n\n\t\t//\tcalculate pointers\n\t\tconst\n\t\t\tstartIndex = splLen === 0 ? 0 : (spliceContent[0] < 0 ? tarLen + spliceContent[0] : spliceContent[0]),\n\t\t\tremoved = splLen < 2 ? tarLen - startIndex : spliceContent[1],\n\t\t\tinserted = Math.max(splLen - 2, 0),\n\t\t\tspliceResult = Reflect.apply(target.splice, target, spliceContent),\n\t\t\tnewTarLen = target.length;\n\n\t\t//\treindex the paths\n\t\tlet tmpObserved;\n\t\tfor (let i = 0, item; i < newTarLen; i++) {\n\t\t\titem = target[i];\n\t\t\tif (item && typeof item === 'object') {\n\t\t\t\ttmpObserved = item[oMetaKey];\n\t\t\t\tif (tmpObserved) {\n\t\t\t\t\ttmpObserved.ownKey = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//\tdetach removed objects\n\t\tlet i, l, item;\n\t\tfor (i = 0, l = spliceResult.length; i < l; i++) {\n\t\t\titem = spliceResult[i];\n\t\t\tif (item && typeof item === 'object') {\n\t\t\t\ttmpObserved = item[oMetaKey];\n\t\t\t\tif (tmpObserved) {\n\t\t\t\t\tspliceResult[i] = tmpObserved.detach();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst changes = [];\n\t\tlet index;\n\t\tfor (index = 0; index < removed; index++) {\n\t\t\tif (index < inserted) {\n\t\t\t\tchanges.push({ type: UPDATE, path: [startIndex + index], value: target[startIndex + index], oldValue: spliceResult[index], object: this });\n\t\t\t} else {\n\t\t\t\tchanges.push({ type: DELETE, path: [startIndex + index], oldValue: spliceResult[index], object: this });\n\t\t\t}\n\t\t}\n\t\tfor (; index < inserted; index++) {\n\t\t\tchanges.push({ type: INSERT, path: [startIndex + index], value: target[startIndex + index], object: this });\n\t\t}\n\t\tcallObservers(oMeta, changes);\n\n\t\treturn spliceResult;\n\t},\n\tproxiedTypedArraySet = function proxiedTypedArraySet(source, offset) {\n\t\tconst\n\t\t\toMeta = this[oMetaKey],\n\t\t\ttarget = oMeta.target,\n\t\t\tsouLen = source.length,\n\t\t\tprev = target.slice(0);\n\t\toffset = offset || 0;\n\n\t\ttarget.set(source, offset);\n\t\tconst changes = new Array(souLen);\n\t\tfor (let i = offset; i < (souLen + offset); i++) {\n\t\t\tchanges[i - offset] = { type: UPDATE, path: [i], value: target[i], oldValue: prev[i], object: this };\n\t\t}\n\n\t\tcallObservers(oMeta, changes);\n\t},\n\tproxiedArrayMethods = {\n\t\tpop: proxiedPop,\n\t\tpush: proxiedPush,\n\t\tshift: proxiedShift,\n\t\tunshift: proxiedUnshift,\n\t\treverse: proxiedReverse,\n\t\tsort: proxiedSort,\n\t\tfill: proxiedFill,\n\t\tcopyWithin: proxiedCopyWithin,\n\t\tsplice: proxiedSplice\n\t},\n\tproxiedTypedArrayMethods = {\n\t\treverse: proxiedReverse,\n\t\tsort: proxiedSort,\n\t\tfill: proxiedFill,\n\t\tcopyWithin: proxiedCopyWithin,\n\t\tset: proxiedTypedArraySet\n\t};\n\nclass OMetaBase {\n\tconstructor(properties, cloningFunction) {\n\t\tconst { target, parent, ownKey } = properties;\n\t\tif (parent && ownKey !== undefined) {\n\t\t\tthis.parent = parent;\n\t\t\tthis.ownKey = ownKey;\n\t\t} else {\n\t\t\tthis.parent = null;\n\t\t\tthis.ownKey = null;\n\t\t}\n\t\tconst targetClone = cloningFunction(target, this);\n\t\tthis.observers = [];\n\t\tthis.revocable = Proxy.revocable(targetClone, this);\n\t\tthis.proxy = this.revocable.proxy;\n\t\tthis.target = targetClone;\n\t\tthis.options = this.processOptions(properties.options);\n\t}\n\n\tprocessOptions(options) {\n\t\tif (options) {\n\t\t\tif (typeof options !== 'object') {\n\t\t\t\tthrow new Error(`Observable options if/when provided, MAY only be an object, got '${options}'`);\n\t\t\t}\n\t\t\tconst invalidOptions = Object.keys(options).filter(option => !validObservableOptionKeys.hasOwnProperty(option));\n\t\t\tif (invalidOptions.length) {\n\t\t\t\tthrow new Error(`'${invalidOptions.join(', ')}' is/are not a valid Observable option/s`);\n\t\t\t}\n\t\t\treturn Object.assign({}, options);\n\t\t} else {\n\t\t\treturn {};\n\t\t}\n\t}\n\n\tdetach() {\n\t\tthis.parent = null;\n\t\treturn this.target;\n\t}\n\n\tset(target, key, value) {\n\t\tlet oldValue = target[key];\n\n\t\tif (value !== oldValue) {\n\t\t\tconst newValue = getObservedOf(value, key, this);\n\t\t\ttarget[key] = newValue;\n\n\t\t\tif (oldValue && typeof oldValue === 'object') {\n\t\t\t\tconst tmpObserved = oldValue[oMetaKey];\n\t\t\t\tif (tmpObserved) {\n\t\t\t\t\toldValue = tmpObserved.detach();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst changes = oldValue === undefined\n\t\t\t\t? [{ type: INSERT, path: [key], value: newValue, object: this.proxy }]\n\t\t\t\t: [{ type: UPDATE, path: [key], value: newValue, oldValue: oldValue, object: this.proxy }];\n\t\t\tcallObservers(this, changes);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tdeleteProperty(target, key) {\n\t\tlet oldValue = target[key];\n\n\t\tdelete target[key];\n\n\t\tif (oldValue && typeof oldValue === 'object') {\n\t\t\tconst tmpObserved = oldValue[oMetaKey];\n\t\t\tif (tmpObserved) {\n\t\t\t\toldValue = tmpObserved.detach();\n\t\t\t}\n\t\t}\n\n\t\tconst changes = [{ type: DELETE, path: [key], oldValue: oldValue, object: this.proxy }];\n\t\tcallObservers(this, changes);\n\n\t\treturn true;\n\t}\n}\n\nclass ObjectOMeta extends OMetaBase {\n\tconstructor(properties) {\n\t\tsuper(properties, prepareObject);\n\t}\n}\n\nclass ArrayOMeta extends OMetaBase {\n\tconstructor(properties) {\n\t\tsuper(properties, prepareArray);\n\t}\n\n\tget(target, key) {\n\t\tif (proxiedArrayMethods.hasOwnProperty(key)) {\n\t\t\treturn proxiedArrayMethods[key];\n\t\t} else {\n\t\t\treturn target[key];\n\t\t}\n\t}\n}\n\nclass TypedArrayOMeta extends OMetaBase {\n\tconstructor(properties) {\n\t\tsuper(properties, prepareTypedArray);\n\t}\n\n\tget(target, key) {\n\t\tif (proxiedTypedArrayMethods.hasOwnProperty(key)) {\n\t\t\treturn proxiedTypedArrayMethods[key];\n\t\t} else {\n\t\t\treturn target[key];\n\t\t}\n\t}\n}\n\nclass Observable {\n\tconstructor() {\n\t\tthrow new Error('Observable MAY NOT be created via constructor, see \"Observable.from\" API');\n\t}\n\n\tstatic from(target, options) {\n\t\tif (!target || typeof target !== 'object') {\n\t\t\tthrow new Error('observable MAY ONLY be created from a non-null object');\n\t\t} else if (target[oMetaKey]) {\n\t\t\treturn target;\n\t\t} else if (Array.isArray(target)) {\n\t\t\treturn new ArrayOMeta({ target: target, ownKey: null, parent: null, options: options }).proxy;\n\t\t} else if (ArrayBuffer.isView(target)) {\n\t\t\treturn new TypedArrayOMeta({ target: target, ownKey: null, parent: null, options: options }).proxy;\n\t\t} else if (target instanceof Date || target instanceof Error) {\n\t\t\tthrow new Error(`${target} found to be one of a on-observable types`);\n\t\t} else {\n\t\t\treturn new ObjectOMeta({ target: target, ownKey: null, parent: null, options: options }).proxy;\n\t\t}\n\t}\n\n\tstatic isObservable(input) {\n\t\treturn !!(input && input[oMetaKey]);\n\t}\n}\n\nObject.freeze(Observable);\n\nexport { Observable };","import _g from \"./g\";\nimport { Globals } from \"./types\";\n\nexport default function utilsFactory(globals?: Globals): any {\n    const g = globals || _g;\n\n    const generateBareUrl = (type: string, integrationID: string): string => `https://api.easybase.io/${type}/${integrationID}`;\n\n    const generateAuthBody = (): any => {\n        const stamp = Date.now();\n        return {\n            token: g.token,\n            token_time: ~~(g.session / (stamp % 64)),\n            now: stamp\n        }\n    }\n    \n    function log(...params: any): void {\n        if (g.options.logging) {\n            console.log(\"EASYBASE â€” \", ...params);\n        }\n    }\n\n    return {\n        generateAuthBody,\n        generateBareUrl,\n        log\n    }\n}\n","import { POST_TYPES, AuthPostResponse, Globals, StatusResponse, EmailTemplate } from \"./types\";\nimport _g from \"./g\";\nimport utilsFactory from \"./utils\";\nimport fetch from 'cross-fetch';\n\nexport default function authFactory(globals?: Globals): any {\n    const g = globals || _g;\n\n    const { generateBareUrl, generateAuthBody, log } = utilsFactory(g);\n\n    function _clearTokens() {\n        g.token = \"\";\n        g.refreshToken = \"\";\n        g.newTokenCallback();\n        g.userID = undefined;\n    }\n\n    const getUserAttributes = async (): Promise<Record<string, string>> => {\n        try {\n            const attrsRes = await tokenPost(POST_TYPES.USER_ATTRIBUTES);\n            g.analyticsEnabled && g.analyticsEventsToTrack.get_user_attributes && g.analyticsEvent('get_user_attributes');\n            return attrsRes.data;\n        } catch (error) {\n            log(error)\n            return error;\n        }\n    }\n\n    const setUserAttribute = async (key: string, value: string): Promise<StatusResponse> => {\n        try {\n            const setAttrsRes = await tokenPost(POST_TYPES.SET_ATTRIBUTE, {\n                key,\n                value\n            });\n            g.analyticsEnabled && g.analyticsEventsToTrack.set_user_attribute && g.analyticsEvent('set_user_attribute', { key });\n            return {\n                success: setAttrsRes.success,\n                message: JSON.stringify(setAttrsRes.data)\n            };\n        } catch (error) {\n            return {\n                success: false,\n                message: error.message || \"Error\",\n                errorCode: error.errorCode || undefined\n            };\n        }\n    }\n\n    const forgotPassword = async (username: string, emailTemplate?: EmailTemplate): Promise<StatusResponse> => {\n        try {\n            const setAttrsRes = await tokenPost(POST_TYPES.FORGOT_PASSWORD_SEND, {\n                username,\n                emailTemplate\n            });\n            g.analyticsEnabled && g.analyticsEventsToTrack.forgot_password && g.analyticsEvent('forgot_password');\n            return {\n                success: setAttrsRes.success,\n                message: setAttrsRes.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                message: error.message || \"Error\",\n                errorCode: error.errorCode || undefined\n            };\n        }\n    }\n\n    const forgotPasswordConfirm = async (code: string, username: string, newPassword: string): Promise<StatusResponse> => {\n        try {\n            const setAttrsRes = await tokenPost(POST_TYPES.FORGOT_PASSWORD_CONFIRM, {\n                username,\n                code,\n                newPassword\n            });\n            g.analyticsEnabled && g.analyticsEventsToTrack.forgot_password_confirm && g.analyticsEvent('forgot_password_confirm');\n            return {\n                success: setAttrsRes.success,\n                message: setAttrsRes.data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                message: error.message || \"Error\",\n                errorCode: error.errorCode || undefined\n            };\n        }\n    }\n\n    const signUp = async (newUserID: string, password: string, userAttributes?: Record<string, string>): Promise<StatusResponse> => {\n        try {\n            const signUpRes = await tokenPost(POST_TYPES.SIGN_UP, {\n                newUserID,\n                password,\n                userAttributes\n            });\n            g.analyticsEnabled && g.analyticsEventsToTrack.sign_up && g.analyticsEvent('sign_up', { method: \"Easybase\" });\n            return {\n                success: signUpRes.success,\n                message: signUpRes.data\n            }\n        } catch (error) {\n            return {\n                success: false,\n                message: error.message || \"Error\",\n                errorCode: error.errorCode || undefined\n            }\n        }\n    }\n\n    const signIn = async (userID: string, password: string): Promise<StatusResponse> => {\n        const t1 = Date.now();\n        g.session = Math.floor(100000000 + Math.random() * 900000000);\n\n        const integrationType = g.ebconfig.integration.split(\"-\")[0].toUpperCase() === \"PROJECT\" ? \"PROJECT\" : \"REACT\";\n\n        try {\n            const res = await fetch(generateBareUrl(integrationType, g.ebconfig.integration), {\n                method: \"POST\",\n                headers: {\n                    'Eb-Post-Req': POST_TYPES.HANDSHAKE,\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    version: g.ebconfig.version,\n                    session: g.session,\n                    instance: g.instance,\n                    userID,\n                    password\n                })\n            });\n\n            const resData = await res.json();\n\n            if (resData.token) {\n                g.token = resData.token;\n                g.refreshToken = resData.refreshToken;\n                g.newTokenCallback();\n                g.userID = resData.userID;\n                g.mounted = true;\n                const [validTokenRes, { hash }, { fromUtf8 }] = await Promise.all([tokenPost(POST_TYPES.VALID_TOKEN), import('fast-sha256'), import('@aws-sdk/util-utf8-browser')])\n                const elapsed = Date.now() - t1;\n                if (validTokenRes.success) {\n                    log(\"Valid auth initiation in \" + elapsed + \"ms\");\n                    if (g.analyticsEnabled && g.analyticsEventsToTrack.login) {\n                        const hashOut = hash(fromUtf8(g.GA_USER_ID_SALT + resData.userID));\n                        const hexHash = Array.prototype.map.call(hashOut, x => ('00' + x.toString(16)).slice(-2)).join('');\n                        g.analyticsIdentify(hexHash);\n                        g.analyticsEvent('login', { method: \"Easybase\" });\n                    }\n                    return {\n                        success: true,\n                        message: \"Successfully signed in user\"\n                    };\n                } else {\n                    return {\n                        success: false,\n                        message: \"Could not sign in user\"\n                    };\n                }\n            } else {\n                return {\n                    success: false,\n                    message: \"Could not sign in user\",\n                    errorCode: resData.ErrorCode || undefined\n                };\n            }\n        } catch (error) {\n            return {\n                success: false,\n                message: error.message || \"Could not sign in user\",\n                errorCode: error.errorCode || undefined\n            };\n        }\n    }\n\n    const resetUserPassword = async (currentPassword: string, newPassword: string): Promise<StatusResponse> => {\n        if (typeof newPassword !== \"string\" || newPassword.length > 100) {\n            return {\n                success: false,\n                message: \"newPassword must be of type string\"\n            };\n        }\n\n        if (typeof currentPassword !== \"string\" || currentPassword.length > 100) {\n            return {\n                success: false,\n                message: \"currentPassword must be of type string\"\n            };\n        }\n\n        try {\n            const setAttrsRes = await tokenPost(POST_TYPES.RESET_PASSWORD, { currentPassword, newPassword });\n            g.analyticsEnabled && g.analyticsEventsToTrack.reset_user_password && g.analyticsEvent('reset_user_password');\n            return {\n                success: setAttrsRes.success,\n                message: JSON.stringify(setAttrsRes.data)\n            };\n        } catch (error) {\n            return {\n                success: false,\n                message: error.message || \"Error\",\n                errorCode: error.errorCode || undefined\n            };\n        }\n    }\n\n    const userID = (): string | undefined => g.userID || undefined;\n\n    const signOut = (): void => {\n        g.token = \"\";\n        g.newTokenCallback();\n        g.userID = undefined;\n    }\n\n    const initAuth = async (): Promise<boolean> => {\n        const t1 = Date.now();\n        g.session = Math.floor(100000000 + Math.random() * 900000000);\n\n        log(`Handshaking on${g.instance} instance`);\n\n        const integrationType = g.ebconfig.integration.split(\"-\")[0].toUpperCase() === \"PROJECT\" ? \"PROJECT\" : \"REACT\";\n\n        try {\n            const res = await fetch(generateBareUrl(integrationType, g.ebconfig.integration), {\n                method: \"POST\",\n                headers: {\n                    'Eb-Post-Req': POST_TYPES.HANDSHAKE,\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    version: g.ebconfig.version,\n                    tt: g.ebconfig.tt,\n                    session: g.session,\n                    instance: g.instance\n                })\n            });\n\n            const resData = await res.json();\n\n            if (resData.token) {\n                g.token = resData.token;\n                g.mounted = true;\n                const validTokenRes = await tokenPost(POST_TYPES.VALID_TOKEN);\n                const elapsed = Date.now() - t1;\n                if (validTokenRes.success) {\n                    log(\"Valid auth initiation in \" + elapsed + \"ms\");\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } catch (error) {\n            console.error(error);\n            return false;\n        }\n    }\n\n    const tokenPost = async (postType: POST_TYPES, body?: {}): Promise<AuthPostResponse> => {\n        if (!g.mounted) {\n            await initAuth();\n        }\n\n        const integrationType = g.ebconfig.integration.split(\"-\")[0].toUpperCase() === \"PROJECT\" ? \"PROJECT\" : \"REACT\";\n\n        const res = await fetch(generateBareUrl(integrationType, g.ebconfig.integration), {\n            method: \"POST\",\n            headers: {\n                'Eb-Post-Req': postType,\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                _auth: generateAuthBody(),\n                ...body\n            })\n        });\n\n        const resData = await res.json();\n\n        if ({}.hasOwnProperty.call(resData, 'ErrorCode') || {}.hasOwnProperty.call(resData, 'code')) {\n            if (resData.ErrorCode === \"TokenExpired\") {\n                if (integrationType === \"PROJECT\") {\n                    try {\n                        const req_res = await tokenPost(POST_TYPES.REQUEST_TOKEN, {\n                            refreshToken: g.refreshToken,\n                            token: g.token\n                        });\n                        if (req_res.success) {\n                            g.token = req_res.data.token\n                            g.newTokenCallback();\n                            return tokenPost(postType, body);\n                        } else {\n                            throw new Error(req_res.data || \"Error\");\n                        }\n                    } catch (error) {\n                        _clearTokens();\n                        return {\n                            success: false,\n                            data: error.message || error\n                        }\n                    }\n                } else {\n                    await initAuth();\n                }\n                return tokenPost(postType, body);\n            } else {\n                const err = new Error(resData.body || resData.ErrorCode || resData.code || \"Error\");\n                (err as any).errorCode = resData.ErrorCode || resData.code;\n                throw err;\n            }\n        } else {\n            return {\n                success: resData.success,\n                data: resData.body\n            }\n        }\n    }\n\n    const tokenPostAttachment = async (formData: FormData, customHeaders: {}): Promise<AuthPostResponse> => {\n        if (!g.mounted) {\n            await initAuth();\n        }\n\n        const regularAuthbody = generateAuthBody();\n\n        const attachmentAuth = {\n            'Eb-token': regularAuthbody.token,\n            'Eb-token-time': regularAuthbody.token_time,\n            'Eb-now': regularAuthbody.now\n        };\n\n        const integrationType = g.ebconfig.integration.split(\"-\")[0].toUpperCase() === \"PROJECT\" ? \"PROJECT\" : \"REACT\";\n\n        const res = await fetch(generateBareUrl(integrationType, g.ebconfig.integration), {\n            method: \"POST\",\n            headers: {\n                'Eb-Post-Req': POST_TYPES.UPLOAD_ATTACHMENT,\n                ...customHeaders,\n                ...attachmentAuth\n            },\n            body: formData\n        });\n\n        const resData = await res.json();\n\n        if ({}.hasOwnProperty.call(resData, 'ErrorCode') || {}.hasOwnProperty.call(resData, 'code')) {\n            if (resData.ErrorCode === \"TokenExpired\") {\n                if (integrationType === \"PROJECT\") {\n                    try {\n                        const req_res = await tokenPost(POST_TYPES.REQUEST_TOKEN, {\n                            refreshToken: g.refreshToken,\n                            token: g.token\n                        });\n\n                        if (req_res.success) {\n                            g.token = req_res.data.token\n                            g.newTokenCallback();\n                            return tokenPostAttachment(formData, customHeaders);\n                        } else {\n                            throw new Error(req_res.data || \"Error\");\n                        }\n                    } catch (error) {\n                        _clearTokens();\n                        return {\n                            success: false,\n                            data: error.message || error\n                        }\n                    }\n                } else {\n                    await initAuth();\n                }\n                return tokenPostAttachment(formData, customHeaders);\n            } else {\n                const err = new Error(resData.body || resData.ErrorCode || resData.code || \"Error\");\n                (err as any).errorCode = resData.ErrorCode || resData.code;\n                throw err;\n            }\n        } else {\n            return {\n                success: resData.success,\n                data: resData.body\n            }\n        }\n    }\n\n    return {\n        initAuth,\n        tokenPost,\n        tokenPostAttachment,\n        signUp,\n        setUserAttribute,\n        getUserAttributes,\n        signIn,\n        signOut,\n        resetUserPassword,\n        forgotPassword,\n        forgotPasswordConfirm,\n        userID\n    }\n}\n","import {\n    POST_TYPES,\n    QueryOptions,\n    Globals\n} from \"./types\";\nimport _g from \"./g\";\n\nimport authFactory from \"./auth\";\n\nexport default function tableFactory(globals?: Globals): any {\n\n    const g = globals || _g;\n\n    const { tokenPost } = authFactory(g);\n\n    const Query = async (options: QueryOptions): Promise<Record<string, any>[]> => {\n        const defaultOptions: QueryOptions = {\n            queryName: \"\"\n        }\n    \n        const fullOptions: QueryOptions = { ...defaultOptions, ...options };\n\n        const res = await tokenPost(POST_TYPES.GET_QUERY, fullOptions);\n        if (res.success) {\n            g.analyticsEnabled && g.analyticsEventsToTrack.query && g.analyticsEvent('query', { queryName: fullOptions.queryName, tableName: fullOptions.tableName || undefined });\n            return res.data\n        } else {\n            return [];\n        }\n    }\n\n    async function fullTableSize(): Promise<number>;\n    async function fullTableSize(tableName: string): Promise<number>;\n    async function fullTableSize(tableName?: string): Promise<number> {\n        const res = await tokenPost(POST_TYPES.TABLE_SIZE, tableName ? { tableName } : {});\n        if (res.success) {\n            g.analyticsEnabled && g.analyticsEventsToTrack.full_table_size && g.analyticsEvent('full_table_size', { tableName: tableName || undefined });\n            return res.data;\n        } else {\n            return 0;\n        }\n    }\n\n    async function tableTypes(): Promise<Record<string, any>>;\n    async function tableTypes(tableName: string): Promise<Record<string, any>>\n    async function tableTypes(tableName?: string): Promise<Record<string, any>> {\n        const res = await tokenPost(POST_TYPES.COLUMN_TYPES, tableName ? { tableName } : {});\n        if (res.success) {\n            g.analyticsEnabled && g.analyticsEventsToTrack.table_types && g.analyticsEvent('table_types', { tableName: tableName || undefined });\n            return res.data;\n        } else {\n            return {};\n        }\n    }\n\n    return {\n        Query,\n        fullTableSize,\n        tableTypes\n    };\n}","import _g from \"./g\";\nimport easyqb from 'easyqb';\nimport { SQW } from \"easyqb/types/sq\";\nimport { NewExpression } from \"easyqb/types/expression\";\nimport authFactory from \"./auth\";\nimport { POST_TYPES, DB_STATUS, Globals, EXECUTE_COUNT, FileFromURI, StatusResponse } from \"./types\";\nimport imageExtensions from \"./assets/image-extensions.json\";\nimport videoExtensions from \"./assets/video-extensions.json\";\n\ninterface IdbFactory {\n    db: (tableName?: string, userAssociatedRecordsOnly?: boolean) => SQW;\n    dbEventListener: (callback: (status?: DB_STATUS, queryType?: string, executeCount?: EXECUTE_COUNT, tableName?: string | null, returned?: any) => void) => () => void;\n    e: NewExpression;\n    setImage(recordKey: string, columnName: string, image: File | FileFromURI, tableName?: string): Promise<StatusResponse>;\n    setVideo(recordKey: string, columnName: string, video: File | FileFromURI, tableName?: string): Promise<StatusResponse>;\n    setFile(recordKey: string, columnName: string, file: File | FileFromURI, tableName?: string): Promise<StatusResponse>;\n}\n\ninterface IUploadFile {\n    recordKey: string;\n    columnName: string;\n    attachment: File | FileFromURI;\n    type: \"image\" | \"video\" | \"file\"\n    tableName?: string;\n}\n\nexport default function dbFactory(globals?: Globals): IdbFactory {\n    const g = globals || _g;\n    const { tokenPost, tokenPostAttachment } = authFactory(g);\n    let _listenerIndex = 0;\n\n    const _listeners: Record<string, (status?: DB_STATUS, queryType?: string, executeCount?: EXECUTE_COUNT, tableName?: string | null, returned?: any) => void> = {};\n\n    function _runListeners(...params: any[]) {\n        for (const cb of Object.values(_listeners)) {\n            cb(...params)\n        }\n    }\n\n    const dbEventListener = (callback: (status?: DB_STATUS, queryType?: string, executeCount?: EXECUTE_COUNT, tableName?: string | null, returned?: any) => void): () => void => {\n        const currKey = '' + _listenerIndex++;\n        _listeners[currKey] = callback;\n        return () => {\n            delete _listeners[currKey]\n        }\n    }\n\n    const allCallback = async (trx: any, tableName: string, userAssociatedRecordsOnly?: boolean): Promise<Record<string, any>[] | number[]> => {\n        trx.count = \"all\";\n        trx.tableName = tableName;\n        if (userAssociatedRecordsOnly) trx.userAssociatedRecordsOnly = userAssociatedRecordsOnly;\n        _runListeners(DB_STATUS.PENDING, trx.type, EXECUTE_COUNT.ALL, tableName !== \"untable\" ? tableName : null);\n        try {\n            const res = await tokenPost(POST_TYPES.EASY_QB, trx);\n            if (res.success) {\n                g.analyticsEnabled && g.analyticsEventsToTrack.db_all && g.analyticsEvent('db_all', { tableName: tableName !== \"untable\" ? tableName : undefined, type: trx.type });\n                _runListeners(DB_STATUS.SUCCESS, trx.type, EXECUTE_COUNT.ALL, tableName !== \"untable\" ? tableName : null, res.data);\n                return res.data;\n            } else {\n                _runListeners(DB_STATUS.ERROR, trx.type, EXECUTE_COUNT.ALL, tableName !== \"untable\" ? tableName : null);\n                return res;\n            }\n        } catch (error) {\n            console.warn(error)\n            _runListeners(DB_STATUS.ERROR, trx.type, EXECUTE_COUNT.ALL, tableName !== \"untable\" ? tableName : null);\n            return [];\n        }\n    }\n\n    const oneCallback = async (trx: any, tableName: string, userAssociatedRecordsOnly?: boolean): Promise<Record<string, any> | number> => {\n        trx.count = \"one\";\n        trx.tableName = tableName;\n        if (userAssociatedRecordsOnly) trx.userAssociatedRecordsOnly = userAssociatedRecordsOnly;\n        _runListeners(DB_STATUS.PENDING, trx.type, EXECUTE_COUNT.ONE, tableName !== \"untable\" ? tableName : null);\n        try {\n            const res = await tokenPost(POST_TYPES.EASY_QB, trx);\n            if (res.success) {\n                g.analyticsEnabled && g.analyticsEventsToTrack.db_one && g.analyticsEvent('db_one', { tableName: tableName !== \"untable\" ? tableName : undefined, type: trx.type });\n                _runListeners(DB_STATUS.SUCCESS, trx.type, EXECUTE_COUNT.ONE, tableName !== \"untable\" ? tableName : null, res.data);\n                return res.data;\n            } else {\n                _runListeners(DB_STATUS.ERROR, trx.type, EXECUTE_COUNT.ONE, tableName !== \"untable\" ? tableName : null);\n                return res;\n            }\n        } catch (error) {\n            console.warn(error)\n            _runListeners(DB_STATUS.ERROR, trx.type, EXECUTE_COUNT.ONE, tableName !== \"untable\" ? tableName : null);\n            return {};\n        }\n    }\n\n    const db = (tableName?: string, userAssociatedRecordsOnly?: boolean) => {\n        if (tableName && typeof tableName === \"string\") {\n            return easyqb({ allCallback, oneCallback, userAssociatedRecordsOnly, tableName: tableName.toUpperCase() })(tableName.replace(/[^0-9a-zA-Z]/g, '_').toUpperCase());\n        } else {\n            return easyqb({ allCallback, oneCallback, userAssociatedRecordsOnly, tableName: \"untable\" })(\"untable\");\n        }\n    }\n\n    const _setAttachment = async ({ recordKey, columnName, attachment, tableName, type }: IUploadFile): Promise<StatusResponse> => {\n        const ext: string = attachment.name.split(\".\").pop()!.toLowerCase();\n\n        if (type === \"image\" && !imageExtensions.includes(ext)) {\n            return {\n                success: false,\n                message: \"Image files must have a proper image extension in the file name\"\n            };\n        }\n\n        if (type === \"video\" && !videoExtensions.includes(ext)) {\n            return {\n                success: false,\n                message: \"Video files must have a proper video extension in the file name\"\n            };\n        }\n\n        const formData = new FormData();\n\n        formData.append(\"file\", attachment as Blob);\n        formData.append(\"name\", attachment.name);\n\n        const customHeaders = {\n            'Eb-upload-type': type,\n            'Eb-column-name': columnName,\n            'Eb-record-id': recordKey,\n            'Eb-table-name': tableName\n        }\n\n        try {\n            const res = await tokenPostAttachment(formData, customHeaders);\n            if (res.success) {\n                g.analyticsEnabled && g.analyticsEventsToTrack.db_one && g.analyticsEvent('db_one', { tableName: tableName !== \"untable\" ? tableName : undefined, type: \"update\" });\n                _runListeners(DB_STATUS.SUCCESS, \"update\", EXECUTE_COUNT.ONE, tableName !== \"untable\" ? tableName : null, res.data);\n            } else {\n                _runListeners(DB_STATUS.ERROR, \"update\", EXECUTE_COUNT.ONE, tableName !== \"untable\" ? tableName : null);\n            }\n            return {\n                message: res.data,\n                success: res.success\n            };\n        } catch (error) {\n            console.warn(error)\n            _runListeners(DB_STATUS.ERROR, \"update\", EXECUTE_COUNT.ONE, tableName !== \"untable\" ? tableName : null);\n            return {\n                message: \"\",\n                success: false,\n            };\n        }\n    }\n\n    const setImage = async (recordKey: string, columnName: string, image: File | FileFromURI, tableName?: string) => _setAttachment({\n        recordKey,\n        columnName,\n        tableName,\n        attachment: image,\n        type: \"image\"\n    });\n\n    const setVideo = async (recordKey: string, columnName: string, video: File | FileFromURI, tableName?: string) => _setAttachment({\n        recordKey,\n        columnName,\n        tableName,\n        attachment: video,\n        type: \"video\"\n    });\n\n    const setFile = async (recordKey: string, columnName: string, file: File | FileFromURI, tableName?: string) => _setAttachment({\n        recordKey,\n        columnName,\n        tableName,\n        attachment: file,\n        type: \"file\"\n    });\n\n    return {\n        db,\n        dbEventListener,\n        e: easyqb().e,\n        setImage,\n        setFile,\n        setVideo\n    }\n}\n","import {\n    EasybaseProviderProps,\n    FrameConfiguration,\n    POST_TYPES,\n    FileFromURI,\n    ContextValue,\n    AddRecordOptions,\n    StatusResponse,\n    ConfigureFrameOptions,\n    UpdateRecordAttachmentOptions,\n    DeleteRecordOptions\n} from \"./types\";\nimport { gFactory } from \"./g\";\nimport deepEqual from \"fast-deep-equal\";\nimport { Observable } from \"./object-observer\";\nimport imageExtensions from \"./assets/image-extensions.json\";\nimport videoExtensions from \"./assets/video-extensions.json\";\nimport authFactory from \"./auth\";\nimport utilsFactory from \"./utils\";\nimport tableFactory from \"./table\";\nimport dbFactory from './db';\n\nexport default function EasybaseProvider({ ebconfig, options }: EasybaseProviderProps): ContextValue {\n    if (typeof ebconfig !== 'object' || ebconfig === null || ebconfig === undefined) {\n        console.error(\"No ebconfig object passed. do `import ebconfig from \\\"./ebconfig.js\\\"` and pass it to the Easybase provider\");\n        return false as any;\n    } else if (!ebconfig.integration) {\n        console.error(\"Invalid ebconfig object passed. Download ebconfig.js from Easybase.io and try again.\");\n        return false as any;\n    }\n\n    const g = gFactory({ ebconfig, options });\n\n    const {\n        tokenPost,\n        tokenPostAttachment,\n        signUp,\n        setUserAttribute,\n        getUserAttributes,\n        signIn,\n        signOut,\n        resetUserPassword,\n        forgotPassword,\n        forgotPasswordConfirm,\n        userID\n    } = authFactory(g);\n\n    const {\n        Query,\n        fullTableSize,\n        tableTypes\n    } = tableFactory(g);\n\n    const {\n        db,\n        dbEventListener,\n        e,\n        setFile,\n        setImage,\n        setVideo\n    } = dbFactory(g);\n\n    const { log } = utilsFactory(g);\n\n    // eslint-disable-next-line dot-notation\n    const isIE = typeof document !== 'undefined' && !!document['documentMode'];\n\n    if (isIE) {\n        console.error(\"EASYBASE â€” easybasejs does not support Internet Explorer. Please use a different browser.\");\n    }\n\n    if (g.ebconfig.tt && g.ebconfig.integration.split(\"-\")[0].toUpperCase() !== \"PROJECT\") {\n        g.mounted = false;\n    } else {\n        g.mounted = true;\n    }\n    \n    g.instance = \"Node\";\n\n    let _isFrameInitialized = true;\n    let _frameConfiguration: FrameConfiguration = {\n        offset: 0,\n        limit: 0\n    };\n    const _observedChangeStack: Record<string, any>[] = [];\n    let _recordIdMap: WeakMap<Record<string, any>, \"string\"> = new WeakMap();\n    let _observableFrame = {\n        observe: (_) => { },\n        unobserve: () => { }\n    }\n    let _frame: Record<string, any>[] = [];\n\n    let isSyncing = false;\n\n    function Frame(): Record<string, any>[];\n    function Frame(index: number): Record<string, any>;\n    function Frame(index?: number): Record<string, any>[] | Record<string, any> {\n        if (typeof index === \"number\") {\n            return _observableFrame[index];\n        } else {\n            return _observableFrame;\n        }\n    }\n\n    const _recordIDExists = (record: Record<string, any>): Boolean => !!_recordIdMap.get(record);\n\n    const configureFrame = (options: ConfigureFrameOptions): StatusResponse => {\n        _frameConfiguration = { ..._frameConfiguration };\n\n        if (options.limit !== undefined) _frameConfiguration.limit = options.limit;\n        if (options.offset !== undefined && options.offset >= 0) _frameConfiguration.offset = options.offset;\n        if (options.tableName !== undefined) _frameConfiguration.tableName = options.tableName;\n\n        _isFrameInitialized = false;\n        return {\n            message: \"Successfully configured frame. Run sync() for changes to be shown in frame\",\n            success: true\n        }\n    }\n\n    const currentConfiguration = (): FrameConfiguration => ({ ..._frameConfiguration });\n\n    const deleteRecord = async (options: DeleteRecordOptions): Promise<StatusResponse> => {\n        const _frameRecord = _frame.find(ele => deepEqual(ele, options.record));\n\n        if (_frameRecord && _recordIdMap.get(_frameRecord)) {\n            const res = await tokenPost(POST_TYPES.SYNC_DELETE, {\n                _id: _recordIdMap.get(_frameRecord),\n                tableName: options.tableName\n            });\n            return {\n                success: res.success,\n                message: res.data\n            }\n        } else {\n            try {\n                const res = await tokenPost(POST_TYPES.SYNC_DELETE, {\n                    record: options.record,\n                    tableName: options.tableName\n                });\n                return {\n                    success: res.success,\n                    message: res.data\n                }\n            } catch (error) {\n                console.error(\"Easybase Error: deleteRecord failed \", error);\n                return {\n                    success: false,\n                    message: \"Easybase Error: deleteRecord failed \" + error,\n                    errorCode: error.errorCode || undefined\n                }\n            }\n        }\n    }\n\n    const addRecord = async (options: AddRecordOptions): Promise<StatusResponse> => {\n        const defaultValues: AddRecordOptions = {\n            insertAtEnd: false,\n            newRecord: {},\n            tableName: undefined\n        }\n\n        const fullOptions: AddRecordOptions = { ...defaultValues, ...options };\n\n        try {\n            const res = await tokenPost(POST_TYPES.SYNC_INSERT, fullOptions);\n            return {\n                message: res.data,\n                success: res.success\n            }\n        } catch (error) {\n            console.error(\"Easybase Error: addRecord failed \", error);\n            return {\n                message: \"Easybase Error: addRecord failed \" + error,\n                success: false,\n                errorCode: error.errorCode || undefined\n            }\n        }\n    }\n\n    // Only allow the deletion of one element at a time\n    // First handle shifting of the array size. Then iterate\n    const sync = async (): Promise<StatusResponse> => {\n        const _realignFrames = (newData: Record<string, any>[]) => {\n            let isNewDataTheSame = true;\n\n            if (newData.length !== _frame.length) {\n                isNewDataTheSame = false;\n            } else {\n                for (let i = 0; i < newData.length; i++) {\n                    const newDataNoId = { ...newData[i] };\n                    delete newDataNoId._id;\n                    if (!deepEqual(newDataNoId, _frame[i])) {\n                        isNewDataTheSame = false;\n                        break;\n                    }\n                }\n            }\n\n            if (!isNewDataTheSame) {\n                const oldframe = [..._frame];\n                oldframe.length = newData.length;\n                _recordIdMap = new WeakMap();\n                for (let i = 0; i < newData.length; i++) {\n                    const currNewEle = newData[i];\n                    _recordIdMap.set(currNewEle, currNewEle._id);\n                    delete currNewEle._id;\n                    oldframe[i] = currNewEle;\n                }\n                _frame = oldframe;\n                _observableFrame.unobserve();\n                _observableFrame = Observable.from(_frame);\n\n                _observableFrame.observe((allChanges: any[]) => {\n                    allChanges.forEach((change: any) => {\n                        _observedChangeStack.push({\n                            type: change.type,\n                            path: change.path,\n                            value: change.value,\n                            _id: _recordIdMap.get(_frame[Number(change.path[0])])\n                            // Not bringing change.object or change.oldValue\n                        });\n                        log(JSON.stringify({\n                            type: change.type,\n                            path: change.path,\n                            value: change.value,\n                            _id: _recordIdMap.get(_frame[Number(change.path[0])])\n                            // Not bringing change.object or change.oldValue\n                        }))\n                    });\n                });\n            }\n        }\n\n        if (isSyncing) {\n            return {\n                success: false,\n                message: \"Easybase Error: the provider is currently syncing, use 'await sync()' before calling sync() again\"\n            };\n        }\n\n        isSyncing = true;\n\n        if (_isFrameInitialized) {\n            if (_observedChangeStack.length > 0) {\n                log(\"Stack change: \", _observedChangeStack);\n                const res = await tokenPost(POST_TYPES.SYNC_STACK, {\n                    stack: _observedChangeStack,\n                    ..._frameConfiguration\n                });\n                if (res.success) {\n                    _observedChangeStack.length = 0;\n                }\n            }\n        }\n\n        try {\n            const res = await tokenPost(POST_TYPES.GET_FRAME, _frameConfiguration);\n\n            // Check if the array recieved from db is the same as frame\n            // If not, update it and send useFrameEffect\n\n            if (res.success === false) {\n                console.error(res.data);\n                isSyncing = false;\n                return {\n                    success: false,\n                    message: \"\" + res.data\n                }\n            } else {\n                _isFrameInitialized = true;\n                _realignFrames(res.data);\n                isSyncing = false;\n                return {\n                    message: 'Success. Call frame for data',\n                    success: true\n                }\n            }\n        } catch (error) {\n            console.error(\"Easybase Error: get failed \", error);\n            isSyncing = false;\n            return {\n                success: false,\n                message: \"Easybase Error: get failed \" + error,\n                errorCode: error.errorCode || undefined\n            }\n        }\n    }\n\n    const updateRecordImage = async (options: UpdateRecordAttachmentOptions): Promise<StatusResponse> => {\n        const res = await _updateRecordAttachment(options, \"image\");\n        return res;\n    }\n    const updateRecordVideo = async (options: UpdateRecordAttachmentOptions): Promise<StatusResponse> => {\n        const res = await _updateRecordAttachment(options, \"video\");\n        return res;\n    }\n    const updateRecordFile = async (options: UpdateRecordAttachmentOptions): Promise<StatusResponse> => {\n        const res = await _updateRecordAttachment(options, \"file\");\n        return res;\n    }\n\n    const _updateRecordAttachment = async (options: UpdateRecordAttachmentOptions, type: string): Promise<StatusResponse> => {\n        const _frameRecord: Record<string, any> | undefined = _frame.find(ele => deepEqual(ele, options.record));\n\n        if (_frameRecord === undefined || !_recordIDExists(_frameRecord)) {\n            log(\"Attempting to add attachment to a new record that has not been synced. Please sync() before trying to add attachment.\");\n            return {\n                success: false,\n                message: \"Attempting to add attachment to a new record that has not been synced. Please sync() before trying to add attachment.\"\n            }\n        }\n\n        const ext: string = options.attachment.name.split(\".\").pop()!.toLowerCase();\n\n        log(ext);\n\n        if (type === \"image\" && !imageExtensions.includes(ext)) {\n            return {\n                success: false,\n                message: \"Image files must have a proper image extension in the file name\"\n            };\n        }\n\n        if (type === \"video\" && !videoExtensions.includes(ext)) {\n            return {\n                success: false,\n                message: \"Video files must have a proper video extension in the file name\"\n            };\n        }\n\n        function isFileFromURI(f: File | FileFromURI): f is FileFromURI {\n            return (f as FileFromURI).uri !== undefined;\n        }\n\n        const formData = new FormData();\n\n        if (isFileFromURI(options.attachment)) {\n            formData.append(\"file\", options.attachment as any);\n            formData.append(\"name\", options.attachment.name);\n        } else {\n            formData.append(\"file\", options.attachment);\n            formData.append(\"name\", options.attachment.name);\n        }\n\n        const customHeaders = {\n            'Eb-upload-type': type,\n            'Eb-column-name': options.columnName,\n            'Eb-record-id': _recordIdMap.get(_frameRecord),\n            'Eb-table-name': options.tableName\n        }\n\n        const res = await tokenPostAttachment(formData, customHeaders);\n\n        await sync();\n\n        return {\n            message: res.data,\n            success: res.success\n        };\n    }\n\n    const c: ContextValue = {\n        /** +++ Will be deprecated */\n        configureFrame,\n        addRecord,\n        deleteRecord,\n        sync,\n        Frame,\n        currentConfiguration,\n        /** --- */\n        updateRecordImage,\n        updateRecordVideo,\n        updateRecordFile,\n        fullTableSize,\n        tableTypes,\n        Query,\n        signIn,\n        signOut,\n        signUp,\n        resetUserPassword,\n        setUserAttribute,\n        getUserAttributes,\n        db,\n        dbEventListener,\n        e,\n        setFile,\n        setImage,\n        setVideo,\n        forgotPassword,\n        forgotPasswordConfirm,\n        userID\n    }\n\n    return c;\n}\n","import fetch from 'cross-fetch';\n\nexport { default as EasybaseProvider } from \"./EasybaseProvider/EasybaseProvider\";\n\nconst generateBareUrl = (type, integrationID) => `https://api.easybase.io/${type}/${integrationID}`;\nconst isBadInt = (my_int) => my_int !== undefined && my_int !== null && Math.floor(my_int) !== my_int;\nconst isBadString = (my_string) => my_string !== undefined && my_string !== null && typeof my_string !== \"string\";\nconst isBadIntegrationID = (my_string) => my_string === undefined || my_string === null || typeof my_string !== \"string\";\nconst isBadObject = (my_obj) => my_obj !== undefined && my_obj !== null && typeof my_obj !== \"object\";\nconst isBadBool = (my_bool) => my_bool !== undefined && my_bool !== null && typeof my_bool !== \"boolean\";\n\ninterface GetOptions {\n    /** Easybase integration ID. Can be found by expanding the integration menu. This id is automatically generated.  */\n    integrationID: string;\n    /** Edit starting index from which records will be retrieved from. Useful for paging. */\n    offset?: number;\n    /** Limit the amount of records to be retrieved. Can be used in combination with offset. */\n    limit?: number;\n    /** Custom authentication string. Can be set in integration menu. If it is set, it is required to access integration. This acts as an extra layer of security and extensibility. */\n    authentication?: string;\n    /** This object can be set to overwrite the query values as set in the integration menu. If your query is setup to find records where 'age' >= 0, passing in { age: 50 } will query where 'age' >= 50. */\n    customQuery?: Record<string, unknown>;\n}\n\n/**\n * \n * @param {GetOptions} options GetOptions.\n * @returns {Promise<Array>} Array of records.\n * \n */\nexport function get(options: GetOptions): Promise<Array<Record<string, unknown>>> {\n\n    const defaultOptions: GetOptions = {\n        integrationID: \"\",\n        offset: undefined,\n        limit: undefined,\n        authentication: undefined,\n        customQuery: undefined\n    }\n    const { integrationID, offset, limit, authentication, customQuery } = { ...defaultOptions, ...options };\n\n    if (isBadIntegrationID(integrationID)) throw new Error(\"integrationID is required and must be a string\");\n    if (isBadInt(offset)) throw new Error(\"offset must be an integer\");\n    if (isBadInt(limit)) throw new Error(\"limit must be an integer\");\n    if (isBadString(authentication)) throw new Error(\"authentication must be a string or null\");\n    if (isBadObject(customQuery)) throw new Error(\"customQuery must be an object or null\");\n\n    return new Promise((resolve, reject) => {\n        try {\n            let fetch_body: any = {};\n            if (typeof customQuery === \"object\") fetch_body = { ...customQuery };\n            if (offset !== undefined) fetch_body.offset = offset;\n            if (limit !== undefined) fetch_body.limit = limit;\n            if (authentication !== undefined) fetch_body.authentication = authentication;\n\n            fetch(generateBareUrl('get', integrationID), {\n                method: \"POST\",\n                body: JSON.stringify(fetch_body),\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            })\n                .then(res => res.json())\n                .then(resData => {\n                    if ({}.hasOwnProperty.call(resData, 'ErrorCode')) {\n                        console.error(resData.message);\n                        resolve([resData.message]);\n                    } else resolve(resData);\n                });\n        }\n        catch (err) { reject(err); }\n    });\n}\n\n\n\ninterface PostOptions {\n    /** Easybase integration ID. Can be found by expanding the integration menu. This id is automatically generated.  */\n    integrationID: string;\n    /** Values to post to Easybase collection. Format is { column name: value } */\n    newRecord: Record<string, unknown>;\n    /** Custom authentication string. Can be set in integration menu. If it is set, it is required to access integration. This acts as an extra layer of security and extensibility. */\n    authentication?: string;\n    /** If true, record will be inserted at the end of the collection rather than the front. */\n    insertAtEnd?: boolean;\n}\n\n/**\n * \n * @param {PostOptions} options PostOptions\n * @returns {Promise<String>} Post status.\n * \n */\nexport function post(options: PostOptions): Promise<string> {\n\n    const defaultValues: PostOptions = {\n        integrationID: \"\",\n        newRecord: {},\n        authentication: undefined,\n        insertAtEnd: undefined\n    }\n\n    const { integrationID, newRecord, authentication, insertAtEnd } = { ...defaultValues, ...options };\n\n    if (isBadIntegrationID(integrationID)) throw new Error(\"integrationID is required and must be a string\");\n    if (isBadObject(newRecord)) throw new Error(\"newRecord is required and must be a string\");\n    if (isBadString(authentication)) throw new Error(\"authentication must be a string or null\");\n    if (isBadBool(insertAtEnd)) throw new Error(\"insertAtEnd must be a boolean or null\");\n\n    return new Promise((resolve, reject) => {\n        try {\n            const fetch_body: any = { ...newRecord };\n            if (authentication !== undefined) fetch_body.authentication = authentication;\n            if (insertAtEnd !== undefined) fetch_body.insertAtEnd = insertAtEnd;\n\n            fetch(generateBareUrl('post', integrationID), {\n                method: \"POST\",\n                body: JSON.stringify(fetch_body),\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            })\n                .then(res => res.json())\n                .then(resData => {\n                    if ({}.hasOwnProperty.call(resData, 'ErrorCode')) console.error(resData.message);\n                    resolve(resData);\n                });\n        }\n        catch (err) { reject(err); }\n    });\n}\n\n\ninterface UpdateOptions {\n    /** Easybase integration ID. Can be found by expanding the integration menu. This id is automatically generated.  */\n    integrationID: string;\n    /** Values to update records with. Format is { column_name: new value } */\n    updateValues: Record<string, unknown>;\n    /** Custom authentication string. Can be set in integration menu. If it is set, it is required to access integration. This acts as an extra layer of security and extensibility. */\n    authentication?: string;\n    /** This object can be set to overwrite the query values as set in the integration menu. If your query is setup to find records where 'age' >= 0, passing in { age: 50 } will query where 'age' >= 50. */\n    customQuery?: Record<string, unknown>;\n}\n\n/**\n * \n * @param {UpdateOptions} options UpdateOptions\n * @returns {Promise<String>} Update status.\n */\nexport function update(options: UpdateOptions): Promise<string> {\n    const defaultValues: UpdateOptions = {\n        integrationID: \"\",\n        updateValues: {},\n        authentication: undefined,\n        customQuery: undefined\n    }\n\n    const { integrationID, updateValues, authentication, customQuery } = { ...defaultValues, ...options };\n\n    if (isBadIntegrationID(integrationID)) throw new Error(\"integrationID is required and must be a string\");\n    if (isBadObject(updateValues) || updateValues === undefined) throw new Error(\"updateValues is required and must be a string\");\n    if (isBadString(authentication)) throw new Error(\"authentication must be a string or null\");\n    if (isBadObject(customQuery)) throw new Error(\"customQuery must be an object or null\");\n\n    return new Promise((resolve, reject) => {\n        try {\n            const fetch_body: any = { updateValues, ...customQuery };\n            if (authentication !== undefined) fetch_body.authentication = authentication;\n\n            fetch(generateBareUrl('update', integrationID), {\n                method: \"POST\",\n                body: JSON.stringify(fetch_body),\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            })\n                .then(res => res.json())\n                .then(resData => {\n                    if ({}.hasOwnProperty.call(resData, 'ErrorCode')) console.error(resData.message);\n                    resolve(resData.message);\n                });\n        }\n        catch (err) { reject(err); }\n    });\n}\n\ninterface DeleteOptions {\n    /** Easybase integration ID. Can be found by expanding the integration menu. This id is automatically generated.  */\n    integrationID: string;\n    /** Custom authentication string. Can be set in integration menu. If it is set, it is required to access integration. This acts as an extra layer of security and extensibility. */\n    authentication?: string;\n    /** This object can be set to overwrite the query values as set in the integration menu. If your query is setup to find records where 'age' >= 0, passing in { age: 50 } will query where 'age' >= 50. */\n    customQuery?: Record<string, unknown>;\n}\n\n\n/**\n * \n * @param {DeleteOptions} options DeleteOptions\n * @return {Promise<String>} Delete status.\n */\nexport function Delete(options: DeleteOptions): Promise<string> {\n\n    const defaultValues: DeleteOptions = {\n        integrationID: \"\",\n        authentication: undefined,\n        customQuery: undefined\n    }\n\n    const { integrationID, authentication, customQuery } = { ...defaultValues, ...options };\n\n    if (isBadIntegrationID(integrationID)) throw new Error(\"integrationID is required and must be a string\");\n    if (isBadString(authentication)) throw new Error(\"authentication must be a string or null\");\n    if (isBadObject(customQuery)) throw new Error(\"customQuery must be an object or null\");\n\n    return new Promise((resolve, reject) => {\n        try {\n            const fetch_body: any = { ...customQuery };\n            if (authentication !== undefined) fetch_body.authentication = authentication;\n\n            fetch(generateBareUrl('delete', integrationID), {\n                method: \"POST\",\n                body: JSON.stringify(fetch_body),\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            })\n                .then(res => res.json())\n                .then(resData => {\n                    if ({}.hasOwnProperty.call(resData, 'ErrorCode')) console.error(resData.message);\n                    resolve(resData.message);\n                });\n        }\n        catch (err) { reject(err); }\n    });\n}\n\n/**\n * @async\n * Call a cloud function, created in Easybase interface.\n * @param {string} route Route as detailed in Easybase. Found under 'Deploy'. Will be in the form of ####...####-function-name.\n * @param {Record<string, any>} postBody Optional object to pass as the body of the POST request. This object will available in your cloud function's event.body.\n * @return {Promise<string>} Response from your cloud function. Detailed with a call to 'return context.succeed(\"RESPONSE\")'.\n */\nexport async function callFunction(route: string, postBody?: Record<string, any>): Promise<string> {\n\n    const res = await fetch(generateBareUrl('function', route.split(\"/\").pop()), {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(postBody) || \"\"\n    });\n\n    const rawDataText = await res.text();\n    return rawDataText;\n}"],"names":["POST_TYPES","DB_STATUS","EXECUTE_COUNT","GlobalNamespace","_g","gFactory","ebconfig","options","optionsObj","gaTrackingObj","googleAnalyticsEventTracking","defaultG","GA_USER_ID_SALT","analyticsEventsToTrack","login","sign_up","forgot_password","forgot_password_confirm","reset_user_password","INSERT","UPDATE","DELETE","REVERSE","SHUFFLE","oMetaKey","Symbol","validObservableOptionKeys","async","validObserverOptionKeys","path","pathsOf","pathsFrom","processObserveOptions","result","undefined","Error","split","filter","n","invalidOptions","Object","keys","option","hasOwnProperty","length","join","observe","observer","oMeta","observers","some","o","opts","push","console","warn","unobserve","ol","al","arguments","i","splice","propertiesBluePrint","value","prepareObject","source","target","defineProperties","key","getObservedOf","prepareArray","l","Array","prepareTypedArray","filterChanges","changes","oPath","change","oPathsOf","type","oPathsFrom","startsWith","callObserverSafe","listener","e","error","callObserversFromMT","batches","callObservers","currentObservable","relevantChanges","newPath","tmp","queueMicrotask","bind","rb","find","b","prototype","apply","tmpa","parent","ownKey","oldValue","object","item","isArray","ArrayOMeta","proxy","ArrayBuffer","isView","TypedArrayOMeta","Date","ObjectOMeta","proxiedPop","poppedIndex","popResult","pop","tmpObserved","detach","proxiedPush","pushContent","initialLength","pushResult","Reflect","proxiedShift","shiftResult","shift","proxiedUnshift","unshiftContent","unshiftResult","unshift","proxiedReverse","reverse","proxiedSort","comparator","sort","proxiedFill","filVal","start","end","tarLen","prev","slice","Math","max","min","fill","tmpTarget","proxiedCopyWithin","dest","len","copyWithin","nItem","oItem","proxiedSplice","splLen","spliceContent","startIndex","removed","inserted","spliceResult","newTarLen","index","proxiedTypedArraySet","offset","souLen","set","proxiedArrayMethods","proxiedTypedArrayMethods","OMetaBase","constructor","properties","cloningFunction","targetClone","revocable","Proxy","processOptions","assign","newValue","deleteProperty","get","Observable","from","isObservable","input","freeze","utilsFactory","globals","g","generateBareUrl","integrationID","generateAuthBody","stamp","now","token","token_time","session","log","params","logging","authFactory","_clearTokens","refreshToken","newTokenCallback","userID","getUserAttributes","attrsRes","tokenPost","USER_ATTRIBUTES","analyticsEnabled","get_user_attributes","analyticsEvent","data","setUserAttribute","setAttrsRes","SET_ATTRIBUTE","set_user_attribute","success","message","JSON","stringify","errorCode","forgotPassword","username","emailTemplate","FORGOT_PASSWORD_SEND","forgotPasswordConfirm","code","newPassword","FORGOT_PASSWORD_CONFIRM","signUp","newUserID","password","userAttributes","signUpRes","SIGN_UP","method","signIn","t1","floor","random","integrationType","integration","toUpperCase","res","fetch","headers","HANDSHAKE","body","version","instance","resData","json","mounted","validTokenRes","hash","fromUtf8","Promise","all","VALID_TOKEN","elapsed","hashOut","hexHash","map","call","x","toString","analyticsIdentify","ErrorCode","resetUserPassword","currentPassword","RESET_PASSWORD","signOut","initAuth","tt","postType","_auth","req_res","REQUEST_TOKEN","err","tokenPostAttachment","formData","customHeaders","regularAuthbody","attachmentAuth","UPLOAD_ATTACHMENT","tableFactory","Query","defaultOptions","queryName","fullOptions","GET_QUERY","query","tableName","fullTableSize","TABLE_SIZE","full_table_size","tableTypes","COLUMN_TYPES","table_types","dbFactory","_listenerIndex","_listeners","_runListeners","cb","values","dbEventListener","callback","currKey","allCallback","trx","userAssociatedRecordsOnly","count","PENDING","ALL","EASY_QB","db_all","SUCCESS","ERROR","oneCallback","ONE","db_one","db","easyqb","replace","_setAttachment","recordKey","columnName","attachment","ext","name","toLowerCase","imageExtensions","includes","videoExtensions","FormData","append","setImage","image","setVideo","video","setFile","file","EasybaseProvider","isIE","document","_isFrameInitialized","_frameConfiguration","limit","_observedChangeStack","_recordIdMap","WeakMap","_observableFrame","_","_frame","isSyncing","Frame","_recordIDExists","record","configureFrame","currentConfiguration","deleteRecord","_frameRecord","ele","deepEqual","SYNC_DELETE","_id","addRecord","defaultValues","insertAtEnd","newRecord","SYNC_INSERT","sync","_realignFrames","newData","isNewDataTheSame","newDataNoId","oldframe","currNewEle","allChanges","forEach","Number","SYNC_STACK","stack","GET_FRAME","updateRecordImage","_updateRecordAttachment","updateRecordVideo","updateRecordFile","isFileFromURI","f","uri","c","isBadInt","my_int","isBadString","my_string","isBadIntegrationID","isBadObject","my_obj","isBadBool","my_bool","authentication","customQuery","resolve","reject","fetch_body","then","post","update","updateValues","Delete","callFunction","route","postBody","rawDataText","text"],"mappings":"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"}