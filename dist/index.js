"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.get = get;
exports.post = post;
exports.update = update;
exports.Delete = Delete;

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var generateBareUrl = function generateBareUrl(type, integrationID) {
  return "https://api.easybase.io/".concat(type, "/").concat(integrationID);
};

var isBadInt = function isBadInt(my_int) {
  return my_int !== undefined && my_int !== null && Math.floor(my_int) !== my_int;
};

var isBadString = function isBadString(my_string) {
  return my_string !== undefined && my_string !== null && typeof my_string !== "string";
};

var isBadIntegrationID = function isBadIntegrationID(my_string) {
  return my_string === undefined || my_string === null || typeof my_string !== "string";
};

var isBadObject = function isBadObject(my_obj) {
  return my_obj !== undefined && my_obj !== null && _typeof(my_obj) !== "object";
};

var isBadBool = function isBadBool(my_bool) {
  return my_bool !== undefined && my_bool !== null && typeof my_bool !== "boolean";
};

/**
 * 
 * @param {GetOptions} options GetOptions.
 * @returns {Promise<Array>} Array of records.
 * 
 */
function get(options) {
  var defaultOptions = {
    integrationID: "",
    offset: undefined,
    limit: undefined,
    authentication: undefined,
    customQuery: undefined
  };

  var _defaultOptions$optio = _objectSpread(_objectSpread({}, defaultOptions), options),
      integrationID = _defaultOptions$optio.integrationID,
      offset = _defaultOptions$optio.offset,
      limit = _defaultOptions$optio.limit,
      authentication = _defaultOptions$optio.authentication,
      customQuery = _defaultOptions$optio.customQuery;

  if (isBadIntegrationID(integrationID)) throw new Error("integrationID is required and must be a string");
  if (isBadInt(offset)) throw new Error("offset must be an integer");
  if (isBadInt(limit)) throw new Error("limit must be an integer");
  if (isBadString(authentication)) throw new Error("authentication must be a string or null");
  if (isBadObject(customQuery)) throw new Error("customQuery must be an object or null");
  return new Promise(function (resolve, reject) {
    try {
      var axios_body = {};
      if (_typeof(customQuery) === "object") axios_body = _objectSpread({}, customQuery);
      if (offset !== undefined) axios_body.offset = offset;
      if (limit !== undefined) axios_body.limit = limit;
      if (authentication !== undefined) axios_body.authentication = authentication;

      _axios["default"].post(generateBareUrl('get', integrationID), axios_body).then(function (res) {
        if ({}.hasOwnProperty.call(res.data, 'ErrorCode')) {
          console.error(res.data.message);
          resolve([res.data.message]);
        } else resolve(res.data);
      });
    } catch (err) {
      reject(err);
    }
  });
}

/**
 * 
 * @param {PostOptions} options PostOptions
 * @returns {Promise<String>} Post status.
 * 
 */
function post(options) {
  var defaultValues = {
    integrationID: "",
    newRecord: undefined,
    authentication: undefined,
    insertAtEnd: undefined
  };

  var _defaultValues$option = _objectSpread(_objectSpread({}, defaultValues), options),
      integrationID = _defaultValues$option.integrationID,
      newRecord = _defaultValues$option.newRecord,
      authentication = _defaultValues$option.authentication,
      insertAtEnd = _defaultValues$option.insertAtEnd;

  if (isBadIntegrationID(integrationID)) throw new Error("integrationID is required and must be a string");
  if (isBadObject(newRecord)) throw new Error("newRecord is required and must be a string");
  if (isBadString(authentication)) throw new Error("authentication must be a string or null");
  if (isBadBool(insertAtEnd)) throw new Error("insertAtEnd must be a boolean or null");
  return new Promise(function (resolve, reject) {
    try {
      var axios_body = _objectSpread({}, newRecord);

      if (authentication !== undefined) axios_body.authentication = authentication;
      if (insertAtEnd !== undefined) axios_body.insertAtEnd = insertAtEnd;

      _axios["default"].post(generateBareUrl('post', integrationID), axios_body).then(function (res) {
        if ({}.hasOwnProperty.call(res.data, 'ErrorCode')) console.error(res.data.message);
        resolve(res.data.message);
      });
    } catch (err) {
      reject(err);
    }
  });
}

/**
 * 
 * @param {UpdateOptions} options UpdateOptions
 * @returns {Promise<String>} Update status.
 */
function update(options) {
  var defaultValues = {
    integrationID: "",
    updateValues: undefined,
    authentication: undefined,
    customQuery: undefined
  };

  var _defaultValues$option2 = _objectSpread(_objectSpread({}, defaultValues), options),
      integrationID = _defaultValues$option2.integrationID,
      updateValues = _defaultValues$option2.updateValues,
      authentication = _defaultValues$option2.authentication,
      customQuery = _defaultValues$option2.customQuery;

  if (isBadIntegrationID(integrationID)) throw new Error("integrationID is required and must be a string");
  if (isBadObject(updateValues) || updateValues === undefined) throw new Error("updateValues is required and must be a string");
  if (isBadString(authentication)) throw new Error("authentication must be a string or null");
  if (isBadObject(customQuery)) throw new Error("customQuery must be an object or null");
  return new Promise(function (resolve, reject) {
    try {
      var axios_body = _objectSpread({
        updateValues: updateValues
      }, customQuery);

      if (authentication !== undefined) axios_body.authentication = authentication;

      _axios["default"].post(generateBareUrl('update', integrationID), axios_body).then(function (res) {
        if ({}.hasOwnProperty.call(res.data, 'ErrorCode')) console.error(res.data.message);
        resolve(res.data.message);
      });
    } catch (err) {
      reject(err);
    }
  });
}

/**
 * 
 * @param {DeleteOptions} options DeleteOptions
 * @return {Promise<String>} Delete status.
 */
function Delete(options) {
  var defaultValues = {
    integrationID: "",
    authentication: undefined,
    customQuery: undefined
  };

  var _defaultValues$option3 = _objectSpread(_objectSpread({}, defaultValues), options),
      integrationID = _defaultValues$option3.integrationID,
      authentication = _defaultValues$option3.authentication,
      customQuery = _defaultValues$option3.customQuery;

  if (isBadIntegrationID(integrationID)) throw new Error("integrationID is required and must be a string");
  if (isBadString(authentication)) throw new Error("authentication must be a string or null");
  if (isBadObject(customQuery)) throw new Error("customQuery must be an object or null");
  return new Promise(function (resolve, reject) {
    try {
      var axios_body = _objectSpread({}, customQuery);

      if (authentication !== undefined) axios_body.authentication = authentication;

      _axios["default"].post(generateBareUrl('delete', integrationID), axios_body).then(function (res) {
        if ({}.hasOwnProperty.call(res.data, 'ErrorCode')) console.error(res.data.message);
        resolve(res.data.message);
      });
    } catch (err) {
      reject(err);
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJnZW5lcmF0ZUJhcmVVcmwiLCJ0eXBlIiwiaW50ZWdyYXRpb25JRCIsImlzQmFkSW50IiwibXlfaW50IiwidW5kZWZpbmVkIiwiTWF0aCIsImZsb29yIiwiaXNCYWRTdHJpbmciLCJteV9zdHJpbmciLCJpc0JhZEludGVncmF0aW9uSUQiLCJpc0JhZE9iamVjdCIsIm15X29iaiIsImlzQmFkQm9vbCIsIm15X2Jvb2wiLCJnZXQiLCJvcHRpb25zIiwiZGVmYXVsdE9wdGlvbnMiLCJvZmZzZXQiLCJsaW1pdCIsImF1dGhlbnRpY2F0aW9uIiwiY3VzdG9tUXVlcnkiLCJFcnJvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiYXhpb3NfYm9keSIsImF4aW9zIiwicG9zdCIsInRoZW4iLCJyZXMiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkYXRhIiwiY29uc29sZSIsImVycm9yIiwibWVzc2FnZSIsImVyciIsImRlZmF1bHRWYWx1ZXMiLCJuZXdSZWNvcmQiLCJpbnNlcnRBdEVuZCIsInVwZGF0ZSIsInVwZGF0ZVZhbHVlcyIsIkRlbGV0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQUNDLElBQUQsRUFBT0MsYUFBUDtBQUFBLDJDQUFvREQsSUFBcEQsY0FBNERDLGFBQTVEO0FBQUEsQ0FBeEI7O0FBQ0EsSUFBTUMsUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBQ0MsTUFBRDtBQUFBLFNBQVlBLE1BQU0sS0FBS0MsU0FBWCxJQUF3QkQsTUFBTSxLQUFLLElBQW5DLElBQTJDRSxJQUFJLENBQUNDLEtBQUwsQ0FBV0gsTUFBWCxNQUF1QkEsTUFBOUU7QUFBQSxDQUFqQjs7QUFDQSxJQUFNSSxXQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUFDQyxTQUFEO0FBQUEsU0FBZUEsU0FBUyxLQUFLSixTQUFkLElBQTJCSSxT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LEVBQVdFLGFBQVgsQ0FBMUIsRUFBcUR3QixVQUFyRCxFQUNLRyxJQURMLENBQ1UsVUFBQUMsR0FBRyxFQUFJO0FBQ1QsWUFBSSxHQUFHQyxjQUFILENBQWtCQyxJQUFsQixDQUF1QkYsR0FBRyxDQUFDRyxJQUEzQixFQUFpQyxXQUFqQyxDQUFKLEVBQW1EQyxPQUFPLENBQUNDLEtBQVIsQ0FBY0wsR0FBRyxDQUFDRyxJQUFKLENBQVNHLE9BQXZCO0FBQ25EWixRQUFBQSxPQUFPLENBQUNNLEdBQUcsQ0FBQ0csSUFBSixDQUFTRyxPQUFWLENBQVA7QUFDSCxPQUpMO0FBS0gsS0FURCxDQVVBLE9BQU9DLEdBQVAsRUFBWTtBQUFFWixNQUFBQSxNQUFNLENBQUNZLEdBQUQsQ0FBTjtBQUFjO0FBQy9CLEdBWk0sQ0FBUDtBQWFIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuY29uc3QgZ2VuZXJhdGVCYXJlVXJsID0gKHR5cGUsIGludGVncmF0aW9uSUQpID0+IGBodHRwczovL2FwaS5lYXN5YmFzZS5pby8ke3R5cGV9LyR7aW50ZWdyYXRpb25JRH1gO1xuY29uc3QgaXNCYWRJbnQgPSAobXlfaW50KSA9PiBteV9pbnQgIT09IHVuZGVmaW5lZCAmJiBteV9pbnQgIT09IG51bGwgJiYgTWF0aC5mbG9vcihteV9pbnQpICE9PSBteV9pbnQ7XG5jb25zdCBpc0JhZFN0cmluZyA9IChteV9zdHJpbmcpID0+IG15X3N0cmluZyAhPT0gdW5kZWZpbmVkICYmIG15X3N0cmluZyAhPT0gbnVsbCAmJiB0eXBlb2YgbXlfc3RyaW5nICE9PSBcInN0cmluZ1wiO1xuY29uc3QgaXNCYWRJbnRlZ3JhdGlvbklEID0gKG15X3N0cmluZykgPT4gbXlfc3RyaW5nID09PSB1bmRlZmluZWQgfHwgbXlfc3RyaW5nID09PSBudWxsIHx8IHR5cGVvZiBteV9zdHJpbmcgIT09IFwic3RyaW5nXCI7XG5jb25zdCBpc0JhZE9iamVjdCA9IChteV9vYmopID0+IG15X29iaiAhPT0gdW5kZWZpbmVkICYmIG15X29iaiAhPT0gbnVsbCAmJiB0eXBlb2YgbXlfb2JqICE9PSBcIm9iamVjdFwiO1xuY29uc3QgaXNCYWRCb29sID0gKG15X2Jvb2wpID0+IG15X2Jvb2wgIT09IHVuZGVmaW5lZCAmJiBteV9ib29sICE9PSBudWxsICYmIHR5cGVvZiBteV9ib29sICE9PSBcImJvb2xlYW5cIjtcblxuaW50ZXJmYWNlIEdldE9wdGlvbnMge1xuICAgIC8qKiBFYXN5QmFzZSBpbnRlZ3JhdGlvbiBJRC4gQ2FuIGJlIGZvdW5kIGJ5IGV4cGFuZGluZyB0aGUgaW50ZWdyYXRpb24gbWVudS4gVGhpcyBpZCBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZC4gICovXG4gICAgaW50ZWdyYXRpb25JRDogc3RyaW5nO1xuICAgIC8qKiBFZGl0IHN0YXJ0aW5nIGluZGV4IGZyb20gd2hpY2ggcmVjb3JkcyB3aWxsIGJlIHJldHJpZXZlZCBmcm9tLiBVc2VmdWwgZm9yIHBhZ2luZy4gKi9cbiAgICBvZmZzZXQ/OiBudW1iZXI7XG4gICAgLyoqIExpbWl0IHRoZSBhbW91bnQgb2YgcmVjb3JkcyB0byBiZSByZXRyaWV2ZWQuIENhbiBiZSB1c2VkIGluIGNvbWJpbmF0aW9uIHdpdGggb2Zmc2V0LiAqL1xuICAgIGxpbWl0PzogbnVtYmVyO1xuICAgIC8qKiBDdXN0b20gYXV0aGVudGljYXRpb24gc3RyaW5nLiBDYW4gYmUgc2V0IGluIGludGVncmF0aW9uIG1lbnUuIElmIGl0IGlzIHNldCwgaXQgaXMgcmVxdWlyZWQgdG8gYWNjZXNzIGludGVncmF0aW9uLiBUaGlzIGFjdHMgYXMgYW4gZXh0cmEgbGF5ZXIgb2Ygc2VjdXJpdHkgYW5kIGV4dGVuc2liaWxpdHkuICovXG4gICAgYXV0aGVudGljYXRpb24/OiBzdHJpbmc7XG4gICAgLyoqIFRoaXMgb2JqZWN0IGNhbiBiZSBzZXQgdG8gb3ZlcndyaXRlIHRoZSBxdWVyeSB2YWx1ZXMgYXMgc2V0IGluIHRoZSBpbnRlZ3JhdGlvbiBtZW51LiBJZiB5b3VyIHF1ZXJ5IGlzIHNldHVwIHRvIGZpbmQgcmVjb3JkcyB3aGVyZSAnYWdlJyA+PSAwLCBwYXNzaW5nIGluIHsgYWdlOiA1MCB9IHdpbGwgcXVlcnkgd2hlcmUgJ2FnZScgPj0gNTAuICovXG4gICAgY3VzdG9tUXVlcnk/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbn1cblxuLyoqXG4gKiBcbiAqIEBwYXJhbSB7R2V0T3B0aW9uc30gb3B0aW9ucyBHZXRPcHRpb25zLlxuICogQHJldHVybnMge1Byb21pc2U8QXJyYXk+fSBBcnJheSBvZiByZWNvcmRzLlxuICogXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXQob3B0aW9uczogR2V0T3B0aW9ucyk6IFByb21pc2U8QXJyYXk8UmVjb3JkPHN0cmluZywgdW5rbm93bj4+PiB7XG4gICAgXG4gICAgY29uc3QgZGVmYXVsdE9wdGlvbnM6IEdldE9wdGlvbnMgPSB7XG4gICAgICAgIGludGVncmF0aW9uSUQ6IFwiXCIsXG4gICAgICAgIG9mZnNldDogdW5kZWZpbmVkLFxuICAgICAgICBsaW1pdDogdW5kZWZpbmVkLFxuICAgICAgICBhdXRoZW50aWNhdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBjdXN0b21RdWVyeTogdW5kZWZpbmVkXG4gICAgfVxuICAgIGNvbnN0IHsgaW50ZWdyYXRpb25JRCwgb2Zmc2V0LCBsaW1pdCwgYXV0aGVudGljYXRpb24sIGN1c3RvbVF1ZXJ5IH0gPSB7IC4uLmRlZmF1bHRPcHRpb25zLCAuLi5vcHRpb25zIH07XG5cbiAgICBpZiAoaXNCYWRJbnRlZ3JhdGlvbklEKGludGVncmF0aW9uSUQpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnRlZ3JhdGlvbklEIGlzIHJlcXVpcmVkIGFuZCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuICAgIGlmIChpc0JhZEludChvZmZzZXQpKSB0aHJvdyBuZXcgRXJyb3IoXCJvZmZzZXQgbXVzdCBiZSBhbiBpbnRlZ2VyXCIpO1xuICAgIGlmIChpc0JhZEludChsaW1pdCkpIHRocm93IG5ldyBFcnJvcihcImxpbWl0IG11c3QgYmUgYW4gaW50ZWdlclwiKTtcbiAgICBpZiAoaXNCYWRTdHJpbmcoYXV0aGVudGljYXRpb24pKSB0aHJvdyBuZXcgRXJyb3IoXCJhdXRoZW50aWNhdGlvbiBtdXN0IGJlIGEgc3RyaW5nIG9yIG51bGxcIik7XG4gICAgaWYgKGlzQmFkT2JqZWN0KGN1c3RvbVF1ZXJ5KSkgdGhyb3cgbmV3IEVycm9yKFwiY3VzdG9tUXVlcnkgbXVzdCBiZSBhbiBvYmplY3Qgb3IgbnVsbFwiKTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgYXhpb3NfYm9keTogYW55ID0ge307XG4gICAgICAgICAgICBpZiAodHlwZW9mIGN1c3RvbVF1ZXJ5ID09PSBcIm9iamVjdFwiKSBheGlvc19ib2R5ID0geyAuLi5jdXN0b21RdWVyeSB9O1xuICAgICAgICAgICAgaWYgKG9mZnNldCAhPT0gdW5kZWZpbmVkKSBheGlvc19ib2R5Lm9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgICAgIGlmIChsaW1pdCAhPT0gdW5kZWZpbmVkKSBheGlvc19ib2R5LmxpbWl0ID0gbGltaXQ7XG4gICAgICAgICAgICBpZiAoYXV0aGVudGljYXRpb24gIT09IHVuZGVmaW5lZCkgYXhpb3NfYm9keS5hdXRoZW50aWNhdGlvbiA9IGF1dGhlbnRpY2F0aW9uO1xuXG4gICAgICAgICAgICBheGlvcy5wb3N0KGdlbmVyYXRlQmFyZVVybCgnZ2V0JywgaW50ZWdyYXRpb25JRCksIGF4aW9zX2JvZHkpXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHt9Lmhhc093blByb3BlcnR5LmNhbGwocmVzLmRhdGEsICdFcnJvckNvZGUnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihyZXMuZGF0YS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoWyByZXMuZGF0YS5tZXNzYWdlIF0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXMuZGF0YSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7IHJlamVjdChlcnIpOyB9XG4gICAgfSk7XG59XG5cblxuXG5pbnRlcmZhY2UgUG9zdE9wdGlvbnMge1xuICAgIC8qKiBFYXN5QmFzZSBpbnRlZ3JhdGlvbiBJRC4gQ2FuIGJlIGZvdW5kIGJ5IGV4cGFuZGluZyB0aGUgaW50ZWdyYXRpb24gbWVudS4gVGhpcyBpZCBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZC4gICovXG4gICAgaW50ZWdyYXRpb25JRDogc3RyaW5nO1xuICAgIC8qKiBWYWx1ZXMgdG8gcG9zdCB0byBFYXN5QmFzZSBjb2xsZWN0aW9uLiBGb3JtYXQgaXMgeyBjb2x1bW4gbmFtZTogdmFsdWUgfSAqL1xuICAgIG5ld1JlY29yZDogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gICAgLyoqIEN1c3RvbSBhdXRoZW50aWNhdGlvbiBzdHJpbmcuIENhbiBiZSBzZXQgaW4gaW50ZWdyYXRpb24gbWVudS4gSWYgaXQgaXMgc2V0LCBpdCBpcyByZXF1aXJlZCB0byBhY2Nlc3MgaW50ZWdyYXRpb24uIFRoaXMgYWN0cyBhcyBhbiBleHRyYSBsYXllciBvZiBzZWN1cml0eSBhbmQgZXh0ZW5zaWJpbGl0eS4gKi9cbiAgICBhdXRoZW50aWNhdGlvbj86IHN0cmluZztcbiAgICAvKiogSWYgdHJ1ZSwgcmVjb3JkIHdpbGwgYmUgaW5zZXJ0ZWQgYXQgdGhlIGVuZCBvZiB0aGUgY29sbGVjdGlvbiByYXRoZXIgdGhhbiB0aGUgZnJvbnQuICovXG4gICAgaW5zZXJ0QXRFbmQ/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIFxuICogQHBhcmFtIHtQb3N0T3B0aW9uc30gb3B0aW9ucyBQb3N0T3B0aW9uc1xuICogQHJldHVybnMge1Byb21pc2U8U3RyaW5nPn0gUG9zdCBzdGF0dXMuXG4gKiBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvc3Qob3B0aW9uczogUG9zdE9wdGlvbnMpOiBQcm9taXNlPHN0cmluZz4ge1xuXG4gICAgY29uc3QgZGVmYXVsdFZhbHVlczogUG9zdE9wdGlvbnMgPSB7XG4gICAgICAgIGludGVncmF0aW9uSUQ6IFwiXCIsXG4gICAgICAgIG5ld1JlY29yZDogdW5kZWZpbmVkLFxuICAgICAgICBhdXRoZW50aWNhdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBpbnNlcnRBdEVuZDogdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgY29uc3QgeyBpbnRlZ3JhdGlvbklELCBuZXdSZWNvcmQsIGF1dGhlbnRpY2F0aW9uLCBpbnNlcnRBdEVuZCB9ID0geyAuLi5kZWZhdWx0VmFsdWVzLCAuLi5vcHRpb25zIH07XG5cbiAgICBpZiAoaXNCYWRJbnRlZ3JhdGlvbklEKGludGVncmF0aW9uSUQpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnRlZ3JhdGlvbklEIGlzIHJlcXVpcmVkIGFuZCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuICAgIGlmIChpc0JhZE9iamVjdChuZXdSZWNvcmQpKSB0aHJvdyBuZXcgRXJyb3IoXCJuZXdSZWNvcmQgaXMgcmVxdWlyZWQgYW5kIG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKGlzQmFkU3RyaW5nKGF1dGhlbnRpY2F0aW9uKSkgdGhyb3cgbmV3IEVycm9yKFwiYXV0aGVudGljYXRpb24gbXVzdCBiZSBhIHN0cmluZyBvciBudWxsXCIpO1xuICAgIGlmIChpc0JhZEJvb2woaW5zZXJ0QXRFbmQpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnNlcnRBdEVuZCBtdXN0IGJlIGEgYm9vbGVhbiBvciBudWxsXCIpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGF4aW9zX2JvZHk6IGFueSA9IHsgLi4ubmV3UmVjb3JkIH07XG4gICAgICAgICAgICBpZiAoYXV0aGVudGljYXRpb24gIT09IHVuZGVmaW5lZCkgYXhpb3NfYm9keS5hdXRoZW50aWNhdGlvbiA9IGF1dGhlbnRpY2F0aW9uO1xuICAgICAgICAgICAgaWYgKGluc2VydEF0RW5kICE9PSB1bmRlZmluZWQpIGF4aW9zX2JvZHkuaW5zZXJ0QXRFbmQgPSBpbnNlcnRBdEVuZDtcblxuICAgICAgICAgICAgYXhpb3MucG9zdChnZW5lcmF0ZUJhcmVVcmwoJ3Bvc3QnLCBpbnRlZ3JhdGlvbklEKSwgYXhpb3NfYm9keSlcbiAgICAgICAgICAgICAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoe30uaGFzT3duUHJvcGVydHkuY2FsbChyZXMuZGF0YSwgJ0Vycm9yQ29kZScpKSBjb25zb2xlLmVycm9yKHJlcy5kYXRhLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlcy5kYXRhLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikgeyByZWplY3QoZXJyKTsgfVxuICAgIH0pO1xufVxuXG5cbmludGVyZmFjZSBVcGRhdGVPcHRpb25zIHtcbiAgICAvKiogRWFzeUJhc2UgaW50ZWdyYXRpb24gSUQuIENhbiBiZSBmb3VuZCBieSBleHBhbmRpbmcgdGhlIGludGVncmF0aW9uIG1lbnUuIFRoaXMgaWQgaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQuICAqL1xuICAgIGludGVncmF0aW9uSUQ6IHN0cmluZztcbiAgICAvKiogVmFsdWVzIHRvIHVwZGF0ZSByZWNvcmRzIHdpdGguIEZvcm1hdCBpcyB7IGNvbHVtbl9uYW1lOiBuZXcgdmFsdWUgfSAqL1xuICAgIHVwZGF0ZVZhbHVlczogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gICAgLyoqIEN1c3RvbSBhdXRoZW50aWNhdGlvbiBzdHJpbmcuIENhbiBiZSBzZXQgaW4gaW50ZWdyYXRpb24gbWVudS4gSWYgaXQgaXMgc2V0LCBpdCBpcyByZXF1aXJlZCB0byBhY2Nlc3MgaW50ZWdyYXRpb24uIFRoaXMgYWN0cyBhcyBhbiBleHRyYSBsYXllciBvZiBzZWN1cml0eSBhbmQgZXh0ZW5zaWJpbGl0eS4gKi9cbiAgICBhdXRoZW50aWNhdGlvbj86IHN0cmluZztcbiAgICAvKiogVGhpcyBvYmplY3QgY2FuIGJlIHNldCB0byBvdmVyd3JpdGUgdGhlIHF1ZXJ5IHZhbHVlcyBhcyBzZXQgaW4gdGhlIGludGVncmF0aW9uIG1lbnUuIElmIHlvdXIgcXVlcnkgaXMgc2V0dXAgdG8gZmluZCByZWNvcmRzIHdoZXJlICdhZ2UnID49IDAsIHBhc3NpbmcgaW4geyBhZ2U6IDUwIH0gd2lsbCBxdWVyeSB3aGVyZSAnYWdlJyA+PSA1MC4gKi9cbiAgICBjdXN0b21RdWVyeT86IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xufVxuXG4vKipcbiAqIFxuICogQHBhcmFtIHtVcGRhdGVPcHRpb25zfSBvcHRpb25zIFVwZGF0ZU9wdGlvbnNcbiAqIEByZXR1cm5zIHtQcm9taXNlPFN0cmluZz59IFVwZGF0ZSBzdGF0dXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGUob3B0aW9uczogVXBkYXRlT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgZGVmYXVsdFZhbHVlczogVXBkYXRlT3B0aW9ucyA9IHtcbiAgICAgICAgaW50ZWdyYXRpb25JRDogXCJcIixcbiAgICAgICAgdXBkYXRlVmFsdWVzOiB1bmRlZmluZWQsXG4gICAgICAgIGF1dGhlbnRpY2F0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIGN1c3RvbVF1ZXJ5OiB1bmRlZmluZWRcbiAgICB9XG5cbiAgICBjb25zdCB7IGludGVncmF0aW9uSUQsIHVwZGF0ZVZhbHVlcywgYXV0aGVudGljYXRpb24sIGN1c3RvbVF1ZXJ5IH0gPSB7IC4uLmRlZmF1bHRWYWx1ZXMsIC4uLm9wdGlvbnMgfTtcblxuICAgIGlmIChpc0JhZEludGVncmF0aW9uSUQoaW50ZWdyYXRpb25JRCkpIHRocm93IG5ldyBFcnJvcihcImludGVncmF0aW9uSUQgaXMgcmVxdWlyZWQgYW5kIG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKGlzQmFkT2JqZWN0KHVwZGF0ZVZhbHVlcykgfHwgdXBkYXRlVmFsdWVzID09PSB1bmRlZmluZWQpIHRocm93IG5ldyBFcnJvcihcInVwZGF0ZVZhbHVlcyBpcyByZXF1aXJlZCBhbmQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAoaXNCYWRTdHJpbmcoYXV0aGVudGljYXRpb24pKSB0aHJvdyBuZXcgRXJyb3IoXCJhdXRoZW50aWNhdGlvbiBtdXN0IGJlIGEgc3RyaW5nIG9yIG51bGxcIik7XG4gICAgaWYgKGlzQmFkT2JqZWN0KGN1c3RvbVF1ZXJ5KSkgdGhyb3cgbmV3IEVycm9yKFwiY3VzdG9tUXVlcnkgbXVzdCBiZSBhbiBvYmplY3Qgb3IgbnVsbFwiKTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBheGlvc19ib2R5OiBhbnkgPSB7IHVwZGF0ZVZhbHVlcywgLi4uY3VzdG9tUXVlcnkgfTtcbiAgICAgICAgICAgIGlmIChhdXRoZW50aWNhdGlvbiAhPT0gdW5kZWZpbmVkKSBheGlvc19ib2R5LmF1dGhlbnRpY2F0aW9uID0gYXV0aGVudGljYXRpb247XG5cbiAgICAgICAgICAgIGF4aW9zLnBvc3QoZ2VuZXJhdGVCYXJlVXJsKCd1cGRhdGUnLCBpbnRlZ3JhdGlvbklEKSwgYXhpb3NfYm9keSlcbiAgICAgICAgICAgICAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoe30uaGFzT3duUHJvcGVydHkuY2FsbChyZXMuZGF0YSwgJ0Vycm9yQ29kZScpKSBjb25zb2xlLmVycm9yKHJlcy5kYXRhLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlcy5kYXRhLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikgeyByZWplY3QoZXJyKTsgfVxuICAgIH0pO1xufVxuXG5pbnRlcmZhY2UgRGVsZXRlT3B0aW9ucyB7XG4gICAgLyoqIEVhc3lCYXNlIGludGVncmF0aW9uIElELiBDYW4gYmUgZm91bmQgYnkgZXhwYW5kaW5nIHRoZSBpbnRlZ3JhdGlvbiBtZW51LiBUaGlzIGlkIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkLiAgKi9cbiAgICBpbnRlZ3JhdGlvbklEOiBzdHJpbmc7XG4gICAgLyoqIEN1c3RvbSBhdXRoZW50aWNhdGlvbiBzdHJpbmcuIENhbiBiZSBzZXQgaW4gaW50ZWdyYXRpb24gbWVudS4gSWYgaXQgaXMgc2V0LCBpdCBpcyByZXF1aXJlZCB0byBhY2Nlc3MgaW50ZWdyYXRpb24uIFRoaXMgYWN0cyBhcyBhbiBleHRyYSBsYXllciBvZiBzZWN1cml0eSBhbmQgZXh0ZW5zaWJpbGl0eS4gKi9cbiAgICBhdXRoZW50aWNhdGlvbj86IHN0cmluZztcbiAgICAvKiogVGhpcyBvYmplY3QgY2FuIGJlIHNldCB0byBvdmVyd3JpdGUgdGhlIHF1ZXJ5IHZhbHVlcyBhcyBzZXQgaW4gdGhlIGludGVncmF0aW9uIG1lbnUuIElmIHlvdXIgcXVlcnkgaXMgc2V0dXAgdG8gZmluZCByZWNvcmRzIHdoZXJlICdhZ2UnID49IDAsIHBhc3NpbmcgaW4geyBhZ2U6IDUwIH0gd2lsbCBxdWVyeSB3aGVyZSAnYWdlJyA+PSA1MC4gKi9cbiAgICBjdXN0b21RdWVyeT86IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xufVxuXG5cbi8qKlxuICogXG4gKiBAcGFyYW0ge0RlbGV0ZU9wdGlvbnN9IG9wdGlvbnMgRGVsZXRlT3B0aW9uc1xuICogQHJldHVybiB7UHJvbWlzZTxTdHJpbmc+fSBEZWxldGUgc3RhdHVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gRGVsZXRlKG9wdGlvbnM6IERlbGV0ZU9wdGlvbnMpOiBQcm9taXNlPHN0cmluZz4ge1xuXG4gICAgY29uc3QgZGVmYXVsdFZhbHVlczogRGVsZXRlT3B0aW9ucyA9IHtcbiAgICAgICAgaW50ZWdyYXRpb25JRDogXCJcIixcbiAgICAgICAgYXV0aGVudGljYXRpb246IHVuZGVmaW5lZCxcbiAgICAgICAgY3VzdG9tUXVlcnk6IHVuZGVmaW5lZFxuICAgIH1cblxuICAgIGNvbnN0IHsgaW50ZWdyYXRpb25JRCwgYXV0aGVudGljYXRpb24sIGN1c3RvbVF1ZXJ5IH0gPSB7IC4uLmRlZmF1bHRWYWx1ZXMsIC4uLm9wdGlvbnMgfTtcblxuICAgIGlmIChpc0JhZEludGVncmF0aW9uSUQoaW50ZWdyYXRpb25JRCkpIHRocm93IG5ldyBFcnJvcihcImludGVncmF0aW9uSUQgaXMgcmVxdWlyZWQgYW5kIG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKGlzQmFkU3RyaW5nKGF1dGhlbnRpY2F0aW9uKSkgdGhyb3cgbmV3IEVycm9yKFwiYXV0aGVudGljYXRpb24gbXVzdCBiZSBhIHN0cmluZyBvciBudWxsXCIpO1xuICAgIGlmIChpc0JhZE9iamVjdChjdXN0b21RdWVyeSkpIHRocm93IG5ldyBFcnJvcihcImN1c3RvbVF1ZXJ5IG11c3QgYmUgYW4gb2JqZWN0IG9yIG51bGxcIik7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgYXhpb3NfYm9keTogYW55ID0geyAuLi5jdXN0b21RdWVyeSB9O1xuICAgICAgICAgICAgaWYgKGF1dGhlbnRpY2F0aW9uICE9PSB1bmRlZmluZWQpIGF4aW9zX2JvZHkuYXV0aGVudGljYXRpb24gPSBhdXRoZW50aWNhdGlvbjtcblxuICAgICAgICAgICAgYXhpb3MucG9zdChnZW5lcmF0ZUJhcmVVcmwoJ2RlbGV0ZScsIGludGVncmF0aW9uSUQpLCBheGlvc19ib2R5KVxuICAgICAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlcy5kYXRhLCAnRXJyb3JDb2RlJykpIGNvbnNvbGUuZXJyb3IocmVzLmRhdGEubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzLmRhdGEubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7IHJlamVjdChlcnIpOyB9XG4gICAgfSk7XG59XG4iXX0=