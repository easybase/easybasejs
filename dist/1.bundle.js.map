{"version":3,"sources":["webpack://Easybase/./node_modules/@aws-sdk/util-utf8-browser/src/index.ts","webpack://Easybase/./node_modules/@aws-sdk/util-utf8-browser/src/whatwgEncodingApi.ts","webpack://Easybase/./node_modules/@aws-sdk/util-utf8-browser/src/pureJs.ts"],"names":["input","TextEncoder","encode","bytes","i","len","length","value","charCodeAt","push","surrogatePair","Uint8Array","from","TextDecoder","decode","decoded","byte","String","fromCharCode","nextByte","encoded","map","byteValue","toString","join","decodeURIComponent"],"mappings":"gMAMO,IAAM,EAAW,SAACA,GACvB,MAAuB,mBAAhBC,YCkCF,SAAkBD,GACvB,OAAO,IAAIC,aAAcC,OAAOF,GDnCI,CAAoBA,GEAlC,SAACA,GAEvB,IADA,IAAMG,EAAuB,GACpBC,EAAI,EAAGC,EAAML,EAAMM,OAAQF,EAAIC,EAAKD,IAAK,CAChD,IAAMG,EAAQP,EAAMQ,WAAWJ,GAC/B,GAAIG,EAAQ,IACVJ,EAAMM,KAAKF,QACN,GAAIA,EAAQ,KACjBJ,EAAMM,KAAMF,GAAS,EAAK,IAAqB,GAARA,EAAoB,UACtD,GAAIH,EAAI,EAAIJ,EAAMM,QAA+B,QAAZ,MAARC,IAAqE,QAAZ,MAA1BP,EAAMQ,WAAWJ,EAAI,IAAyB,CAC/G,IAAMM,EAAgB,QAAoB,KAARH,IAAyB,KAA+B,KAAxBP,EAAMQ,aAAaJ,IACrFD,EAAMM,KACHC,GAAiB,GAAM,IACtBA,GAAiB,GAAM,GAAY,IACnCA,GAAiB,EAAK,GAAY,IACnB,GAAhBA,EAA4B,UAG/BP,EAAMM,KAAMF,GAAS,GAAM,IAAcA,GAAS,EAAK,GAAY,IAAqB,GAARA,EAAoB,KAIxG,OAAOI,WAAWC,KAAKT,GFrB0C,CAAWH,IAEjE,EAAS,SAACA,GACrB,MAAuB,mBAAhBa,YCmCF,SAAgBb,GACrB,OAAO,IAAIa,YAAY,SAASC,OAAOd,GDpCH,CAAkBA,GE6BlC,SAACA,GAErB,IADA,IAAIe,EAAU,GACLX,EAAI,EAAGC,EAAML,EAAMM,OAAQF,EAAIC,EAAKD,IAAK,CAChD,IAAMY,EAAOhB,EAAMI,GACnB,GAAIY,EAAO,IACTD,GAAWE,OAAOC,aAAaF,QAC1B,GAAI,KAAcA,GAAQA,EAAO,IAAY,CAClD,IAAMG,EAAWnB,IAAQI,GACzBW,GAAWE,OAAOC,cAAsB,GAAPF,IAAmB,EAAiB,GAAXG,QACrD,GAAI,KAAcH,GAAQA,EAAO,IAAa,CACnD,IACMI,EAAU,IADM,CAACJ,EAAMhB,IAAQI,GAAIJ,IAAQI,GAAIJ,IAAQI,IACzBiB,KAAI,SAACC,GAAc,OAAAA,EAAUC,SAAS,OAAKC,KAAK,KACpFT,GAAWU,mBAAmBL,QAE9BL,GAAWE,OAAOC,cACP,GAAPF,IAAkB,IAAqB,GAAbhB,IAAQI,KAAkB,EAAmB,GAAbJ,IAAQI,IAK1E,OAAOW,EFjDwD,CAASf","file":"1.bundle.js","sourcesContent":["import { fromUtf8 as jsFromUtf8, toUtf8 as jsToUtf8 } from \"./pureJs\";\nimport { fromUtf8 as textEncoderFromUtf8, toUtf8 as textEncoderToUtf8 } from \"./whatwgEncodingApi\";\n\ndeclare const TextDecoder: Function | undefined;\ndeclare const TextEncoder: Function | undefined;\n\nexport const fromUtf8 = (input: string): Uint8Array =>\n  typeof TextEncoder === \"function\" ? textEncoderFromUtf8(input) : jsFromUtf8(input);\n\nexport const toUtf8 = (input: Uint8Array): string =>\n  typeof TextDecoder === \"function\" ? textEncoderToUtf8(input) : jsToUtf8(input);\n","/**\n * A declaration of the global TextEncoder and TextDecoder constructors.\n *\n * @see https://encoding.spec.whatwg.org/\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace Encoding {\n  interface TextDecoderOptions {\n    fatal?: boolean;\n    ignoreBOM?: boolean;\n  }\n\n  interface TextDecodeOptions {\n    stream?: boolean;\n  }\n\n  interface TextDecoder {\n    readonly encoding: string;\n    readonly fatal: boolean;\n    readonly ignoreBOM: boolean;\n    decode(input?: ArrayBuffer | ArrayBufferView, options?: TextDecodeOptions): string;\n  }\n\n  export interface TextDecoderConstructor {\n    new (label?: string, options?: TextDecoderOptions): TextDecoder;\n  }\n\n  interface TextEncoder {\n    readonly encoding: \"utf-8\";\n    encode(input?: string): Uint8Array;\n  }\n\n  export interface TextEncoderConstructor {\n    new (): TextEncoder;\n  }\n}\n\ndeclare const TextDecoder: Encoding.TextDecoderConstructor;\n\ndeclare const TextEncoder: Encoding.TextEncoderConstructor;\n\nexport function fromUtf8(input: string): Uint8Array {\n  return new TextEncoder().encode(input);\n}\n\nexport function toUtf8(input: Uint8Array): string {\n  return new TextDecoder(\"utf-8\").decode(input);\n}\n","/**\n * Converts a JS string from its native UCS-2/UTF-16 representation into a\n * Uint8Array of the bytes used to represent the equivalent characters in UTF-8.\n *\n * Cribbed from the `goog.crypt.stringToUtf8ByteArray` function in the Google\n * Closure library, though updated to use typed arrays.\n */\nexport const fromUtf8 = (input: string): Uint8Array => {\n  const bytes: Array<number> = [];\n  for (let i = 0, len = input.length; i < len; i++) {\n    const value = input.charCodeAt(i);\n    if (value < 0x80) {\n      bytes.push(value);\n    } else if (value < 0x800) {\n      bytes.push((value >> 6) | 0b11000000, (value & 0b111111) | 0b10000000);\n    } else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\n      const surrogatePair = 0x10000 + ((value & 0b1111111111) << 10) + (input.charCodeAt(++i) & 0b1111111111);\n      bytes.push(\n        (surrogatePair >> 18) | 0b11110000,\n        ((surrogatePair >> 12) & 0b111111) | 0b10000000,\n        ((surrogatePair >> 6) & 0b111111) | 0b10000000,\n        (surrogatePair & 0b111111) | 0b10000000\n      );\n    } else {\n      bytes.push((value >> 12) | 0b11100000, ((value >> 6) & 0b111111) | 0b10000000, (value & 0b111111) | 0b10000000);\n    }\n  }\n\n  return Uint8Array.from(bytes);\n};\n\n/**\n * Converts a typed array of bytes containing UTF-8 data into a native JS\n * string.\n *\n * Partly cribbed from the `goog.crypt.utf8ByteArrayToString` function in the\n * Google Closure library, though updated to use typed arrays and to better\n * handle astral plane code points.\n */\nexport const toUtf8 = (input: Uint8Array): string => {\n  let decoded = \"\";\n  for (let i = 0, len = input.length; i < len; i++) {\n    const byte = input[i];\n    if (byte < 0x80) {\n      decoded += String.fromCharCode(byte);\n    } else if (0b11000000 <= byte && byte < 0b11100000) {\n      const nextByte = input[++i];\n      decoded += String.fromCharCode(((byte & 0b11111) << 6) | (nextByte & 0b111111));\n    } else if (0b11110000 <= byte && byte < 0b101101101) {\n      const surrogatePair = [byte, input[++i], input[++i], input[++i]];\n      const encoded = \"%\" + surrogatePair.map((byteValue) => byteValue.toString(16)).join(\"%\");\n      decoded += decodeURIComponent(encoded);\n    } else {\n      decoded += String.fromCharCode(\n        ((byte & 0b1111) << 12) | ((input[++i] & 0b111111) << 6) | (input[++i] & 0b111111)\n      );\n    }\n  }\n\n  return decoded;\n};\n"],"sourceRoot":""}